import javax.swing.*;
import java.awt.event.*;
import java.util.Random;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.FileReader;

public class main extends JFrame implements ActionListener {

	private static final long serialVersionUID = 1L;
	JFrame window;
	JPanel mainMenuPanel, characterCreationPanel, classSelectionPanel, enterNamePanel, introductionPanel, townPanel,
			townSelectPanel, dungeonPanel, dungeonOptionsPanel, dungeonEnemyDefeatedPanel, weaponShopPanel,
			currentWeaponDisplay, armorShopPanel, currentArmorDisplay, floorSelectPanel, floorSelectButtonsPanel,
			saveSelectPanel, saveSelectButtonsPanel, trainingPanel, accuracyPanel, speedPanel, amuletPanel, amuletDisplay;
	JButton playGame, quitGame, confirmClass, confirmPlayerName, continueIntro, continueIntro2, weaponShop, armorShop,
			dungeonEntrance, dungeonLightAttack, dungeonHeavyAttack, dungeonSpecialMove, dungeonFlee, dungeonContinue,
			dungeonLeave, continueBoss1, purchaseWeapon, equipWeapon, leaveWeaponShop, nextWeapon, previousWeapon,
			purchaseArmor, equipArmor, leaveArmorShop, nextArmor, previousArmor, selectFloor, leaveFloorSelection,
			continueBoss2, continueBoss3, continueBoss4, continueBoss5, selectSave, leaveSaveSelection, leaveTown,
			accuracy1, accuracy2, accuracy3, speed1, speed2, speed3, trainingGrounds, leaveTrainingGrounds, equipAmulet,
			leaveAmuletShop, amuletShop, nextAmulet, previousAmulet;
	JLabel title, classSelection, warriorBio, mercenaryBio, paladinBio, enterName, currentEnemyName, currentEnemyHealth,
			playerHealthLabel, playerNameLabel, goldCounter, currentRoom, weaponName, weaponCost, weaponDamage,
			weaponDisplayedCounter, armorName, armorCost, armorHealth, armorDisplayedCounter, townWeaponEquipped,
			townArmorEquipped, accuracy1Cost, accuracy2Cost, accuracy3Cost, speed1Cost, speed2Cost, speed3Cost,
			displayAccuracy, displaySpeed, amuletName, amuletDescription, amuletDisplayedCounter, townAmuletEquipped;
	JRadioButton warriorClass, mercenaryClass, paladinClass, firstFloor, secondFloor, thirdFloor, fourthFloor,
			fifthFloor, save1, save2, save3, save4, save5;
	JTextField playerName;
	private static JDialog intro1, intro2, boss1, boss2, boss3, boss4, boss5;
	Font titleFont = new Font("Times New Roman", Font.PLAIN, 84);
	static Font textFont = new Font("Times New Roman", Font.PLAIN, 32);
	Font shopFont = new Font("Times New Roman", Font.PLAIN, 24);
	static int playerHealth = -1, playerDamage = -1, playerSpeed = -1, playerAccuracy = -1, playerGold = -1,
			currentPlayerHealth, specialMoveCounter, currentFloor;
	static String name = "na", build = "na", selectedSave = "";
	static boolean beatBoss1 = false, beatBoss2 = false, beatBoss3 = false, beatBoss4 = false, beatBoss5 = false;

	// Floor 1
	static String[] floor1Enemies = { "Skeleton", "Undead Soldier", "Cursed Tombstone", "Graverobber", "Banshee" };
	static int[] floor1Stats = { 23, 4, 2, 67 };

	// Floor 2
	static String[] floor2Enemies = { "Wolf", "Bear", "Deer", "Cougar", "Eagle" };
	static int[] floor2Stats = { 36, 9, 3, 70 };

	// Floor 3
	static String[] floor3Enemies = { "Sorcerer", "Apprentice", "Mage", "Alchemist", "Thaumaturge" };
	static int[] floor3Stats = { 44, 12, 5, 76 };

	// Floor 4
	static String[] floor4Enemies = { "Assassin", "Bandit", "Mercenary", "Poison Master", "Thief" };
	static int[] floor4Stats = { 52, 16, 7, 82 };

	// Floor 5
	static String[] floor5Enemies = { "Shieldbearer", "Knight", "Squire", "Crusader", "Spearman" };
	static int[] floor5Stats = { 60, 20, 9, 86 };

	// Weapon List
	String[] weaponNames = { "Rock", "Wooden Club", "Hatchet", "Mace", "Sword", "Halberd", "Great Hammer",
			"Great Sword" };
	int[] weaponPrices = { 50, 125, 400, 675, 975, 1200, 1500, 1800 };
	int[] weaponDamages = { 5, 10, 14, 20, 28, 32, 36, 38 };
	int currWeaponDisplayed = 0;
	static boolean[] weaponsPurchased = { false, false, false, false, false, false, false, false };
	static String[] equippedWeapon = { "None", "0", "0" };
	static int currEquippedWeapon = -1;

	// Armor List
	String[] armorNames = { "Leather Armor", "Scale Armor", "Plated Mail Armor", "Chainmail Armor", "Plated Iron Armor",
			"Plated Steel Armor" };
	int[] armorPrices = { 150, 300, 500, 800, 1000, 1500 };
	int[] armorHealths = { 6, 12, 18, 24, 30, 36 };
	int currArmorDisplayed = 0;
	static boolean[] armorsPurchased = { false, false, false, false, false, false };
	static String[] equippedArmor = { "None", "0", "0" };
	static int currEquippedArmor = -1;
	
	// Amulet List
	String[] amuletNames = { "???", "???" , "???" , "???" , "???" };
	int[] amuletModifiers = { 15, 3, 10, 12, 2 };
	String[] amuletDesc = { "???" , "???" , "???" , "???" , "???" };
	int currAmuletDisplayed = 0;
	static boolean[] amuletsUnlocked = { false, false, false, false, false};
	static String[] equippedAmulet = { "None", "0" };
	static int currEquippedAmulet = -1;
	boolean doubleGold = false;
	
	// Amulet data storage
	String[] hiddenAmuletNames = { "Amulet of Precision", "Amulet of Speed" , "Amulet of Defense" , "Amulet of Power" , "Amulet of Wealth"};
	int[] hiddenAmuletModifiers = { 15, 3, 10, 12, 2 };
	String[] hiddenAmuletDesc = { "Amulet grants user +15 Accuracy" , "Amulet grants user +3 Speed" , "Amulet grants user +10 Health" , "Amulet grants user +12 Damage" , "Amulet doubles user's gold rewards" };

	// Random Generator
	Random generator = new Random(System.currentTimeMillis());
	int rand, roomCounter;

	// Dungeon Enemy Stats
	String currentEnemy = "";
	int enemyH, enemyS, enemySp, enemyAcc;

	// Creation of the different panels
	main() {
		// Main Menu Panel
		mainMenuPanel = new JPanel();
		mainMenuPanel.setBounds(0, 0, 900, 650);
		mainMenuPanel.setBackground(Color.black);
		mainMenuPanel.setLayout(null);
		playGame = new JButton("Play Game");
		playGame.setBounds(350, 280, 200, 50);
		playGame.setBackground(Color.gray);
		playGame.addActionListener(this);
		mainMenuPanel.add(playGame);
		quitGame = new JButton("Quit Game");
		quitGame.setBounds(350, 350, 200, 50);
		quitGame.setBackground(Color.gray);
		quitGame.addActionListener(this);
		mainMenuPanel.add(quitGame);
		title = new JLabel("Bozo Legends");
		title.setFont(titleFont);
		title.setForeground(Color.yellow);
		title.setBounds(230, 100, 500, 100);
		mainMenuPanel.add(title);
		mainMenuPanel.setVisible(true);

		// Character Creation Panel
		characterCreationPanel = new JPanel();
		characterCreationPanel.setBounds(0, 0, 900, 650);
		characterCreationPanel.setBackground(Color.black);
		characterCreationPanel.setLayout(null);
		classSelectionPanel = new JPanel();
		classSelectionPanel.setBounds(45, 90, 800, 350);
		classSelectionPanel.setBackground(Color.gray);
		classSelectionPanel.setLayout(null);
		classSelectionPanel.setVisible(false);
		characterCreationPanel.add(classSelectionPanel);
		classSelection = new JLabel("Select a class:");
		classSelection.setFont(textFont);
		classSelection.setBounds(20, 30, 200, 30);
		classSelectionPanel.add(classSelection);
		warriorClass = new JRadioButton("Warrior");
		warriorClass.setBounds(100, 80, 100, 30);
		mercenaryClass = new JRadioButton("Mercenary");
		mercenaryClass.setBounds(220, 80, 100, 30);
		paladinClass = new JRadioButton("Paladin");
		paladinClass.setBounds(340, 80, 100, 30);
		ButtonGroup classSelectionButtons = new ButtonGroup();
		classSelectionButtons.add(warriorClass);
		classSelectionButtons.add(mercenaryClass);
		classSelectionButtons.add(paladinClass);
		classSelectionPanel.add(warriorClass);
		classSelectionPanel.add(mercenaryClass);
		classSelectionPanel.add(paladinClass);
		warriorBio = new JLabel(
				"Warrior[HP: 18, Damage: 2, Speed: 4, Accuracy: 84] Special Move: Heal for 1/3 of max health.");
		warriorBio.setBounds(100, 120, 900, 30);
		mercenaryBio = new JLabel(
				"Mercenary[HP: 14, Damage: 3, Speed: 1, Accuracy: 72] Special Move: Guaranteed Heavy Attack.");
		mercenaryBio.setBounds(100, 150, 900, 30);
		paladinBio = new JLabel(
				"Paladin[HP: 22, Damage: 1, Speed: 2, Accuracy: 80] Special Move: Damage enemy and heal for 1/5 of max health.");
		paladinBio.setBounds(100, 180, 900, 30);
		classSelectionPanel.add(warriorBio);
		classSelectionPanel.add(mercenaryBio);
		classSelectionPanel.add(paladinBio);
		classSelectionPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLoweredBevelBorder(),
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		confirmClass = new JButton("Confirm Class");
		confirmClass.setBounds(325, 270, 150, 50);
		confirmClass.addActionListener(this);
		classSelectionPanel.add(confirmClass);
		enterNamePanel = new JPanel();
		enterNamePanel.setBounds(45, 90, 800, 350);
		enterNamePanel.setBackground(Color.gray);
		enterNamePanel.setLayout(null);
		enterNamePanel.setVisible(false);
		enterNamePanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLoweredBevelBorder(),
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		characterCreationPanel.add(enterNamePanel);
		enterName = new JLabel("Enter your character's name:");
		enterName.setFont(textFont);
		enterName.setBounds(230, 80, 400, 50);
		enterNamePanel.add(enterName);
		playerName = new JTextField("");
		playerName.setBounds(210, 150, 400, 30);
		enterNamePanel.add(playerName);
		confirmPlayerName = new JButton("Confirm Name");
		confirmPlayerName.setBounds(325, 270, 150, 50);
		confirmPlayerName.addActionListener(this);
		enterNamePanel.add(confirmPlayerName);
		characterCreationPanel.setVisible(false);

		// Introduction Panel
		introductionPanel = new JPanel();
		introductionPanel.setBounds(0, 0, 900, 650);
		introductionPanel.setBackground(Color.black);
		introductionPanel.setLayout(null);
		intro1 = new JDialog(window, "Introduction", true);
		intro1.setLayout(new FlowLayout());
		continueIntro = new JButton("Continue");
		continueIntro.addActionListener(this);
		intro1.add(new JLabel("Long long ago, there was legend of a true bozo warrior."));
		intro1.add(new JLabel("He was fabled to be the strongest in the land, with weapons of mass destruction"));
		intro1.add(new JLabel("that could only be dreamt up by the imagination. After his time passed,"));
		intro1.add(new JLabel("darkness rose again to reclaim their lost kingdom. It is up to you now intrepid"));
		intro1.add(new JLabel("adventurer. Reclaim our land! Slay the four Kings of Darkness! SAVE US!"));
		intro1.setLocation(200, 200);
		intro1.add(continueIntro);
		intro1.setSize(550, 200);
		intro2 = new JDialog(window, "Introduction", false);
		intro2.setLayout(new FlowLayout());
		continueIntro2 = new JButton("Continue");
		continueIntro2.addActionListener(this);
		intro2.add(new JLabel("'You...adventurer...what is your name? Not a speaker, eh? Hm. Peculiar."));
		intro2.add(new JLabel("You seek to save us yet from this dire situation we find ourselves in, yes?"));
		intro2.add(new JLabel("Well in that case you will need tools. Head to town down the road from here."));
		intro2.add(new JLabel("There you will find multiple shops with the things you will need. And here, take"));
		intro2.add(new JLabel("this gold to start you off. It should be enough to get yourself a weapon. Good luck.'"));
		intro2.setLocation(200, 200);
		intro2.add(continueIntro2);
		intro2.setSize(550, 200);
		introductionPanel.setVisible(false);

		// Boss 1
		boss1 = new JDialog(window, "Floor Boss", false);
		boss1.setLayout(new FlowLayout());
		continueBoss1 = new JButton("Continue");
		continueBoss1.addActionListener(this);
		boss1.add(new JLabel("You walk to the end of the graveyard to find a large shadow looming over you."));
		boss1.add(new JLabel("The shadow notices you and begins to grow bigger as it approaches."));
		boss1.add(new JLabel("All of a sudden, the shadow shrinks, and a small gnome appears in the doorway"));
		boss1.add(new JLabel("wielding a tiny hammer. He yells 'GIMME THEM TOES BITCH"));
		boss1.setLocation(200, 200);
		boss1.add(continueBoss1);
		boss1.setSize(550, 200);

		// Boss 2
		boss2 = new JDialog(window, "Floor Boss", false);
		boss2.setLayout(new FlowLayout());
		boss2.add(new JLabel("As the forest grows darker the trees grow closer together, making it"));
		boss2.add(new JLabel("difficult to navigate the terrain. The trees suddenly part ways to reveal"));
		boss2.add(new JLabel("a small clearing, with a tree standing tall in the center. The tree begins"));
		boss2.add(new JLabel("to move, with no intention of letting you leave it's domain alive."));
		boss2.setLocation(200, 200);
		boss2.setSize(550, 200);
		continueBoss2 = new JButton("Continue");
		continueBoss2.addActionListener(this);
		boss2.add(continueBoss2);

		// Boss 3
		boss3 = new JDialog(window, "Floor Boss", false);
		boss3.setLayout(new FlowLayout());
		boss3.add(new JLabel("The library halls converge into a main study area, with a cauldron in the"));
		boss3.add(new JLabel("middle. Smoke begins to rise from the cauldron as an entity makes its"));
		boss3.add(new JLabel("known. The being looks down upon you, ready to take you from this world."));
		boss3.setLocation(200, 200);
		boss3.setSize(550, 200);
		continueBoss3 = new JButton("Continue");
		continueBoss3.addActionListener(this);
		boss3.add(continueBoss3);

		// Boss 4
		boss4 = new JDialog(window, "Floor Boss", false);
		boss4.setLayout(new FlowLayout());
		boss4.add(new JLabel("The shadows collect into one spot and form a man in a cloak. With dagger"));
		boss4.add(new JLabel("in hand, he stares you down with a menacing grin. He extends his hand out"));
		boss4.add(new JLabel("and beckons you forward to make the first move."));
		boss4.setLocation(200, 200);
		boss4.setSize(550, 200);
		continueBoss4 = new JButton("Continue");
		continueBoss4.addActionListener(this);
		boss4.add(continueBoss4);

		// Boss 5
		boss5 = new JDialog(window, "Floor Boss", false);
		boss5.setLayout(new FlowLayout());
		boss5.add(new JLabel("The corridors lead you to the king's hall, where a knight in golden armor"));
		boss5.add(new JLabel("awaits. 'It has been a while since I have faced a bozo of such renown', he"));
		boss5.add(new JLabel("says. 'Come forth bozo. Prove the legends of you are as true as many make"));
		boss5.add(new JLabel("them seem to be.'"));
		boss5.setLocation(200, 200);
		boss5.setSize(550, 200);
		continueBoss5 = new JButton("Continue");
		continueBoss5.addActionListener(this);
		boss5.add(continueBoss5);

		// Town Panel
		townPanel = new JPanel();
		townPanel.setBounds(0, 0, 900, 650);
		townPanel.setBackground(Color.black);
		townPanel.setLayout(null);
		townSelectPanel = new JPanel();
		townSelectPanel.setBounds(45, 220, 800, 350);
		townSelectPanel.setBackground(Color.gray);
		townSelectPanel.setLayout(null);
		townSelectPanel.setVisible(false);
		townSelectPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLoweredBevelBorder(),
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		townPanel.add(townSelectPanel);
		weaponShop = new JButton("Weapon Shop");
		weaponShop.setBounds(50, 80, 200, 50);
		weaponShop.addActionListener(this);
		townSelectPanel.add(weaponShop);
		armorShop = new JButton("Armor Shop");
		armorShop.setBounds(50, 160, 200, 50);
		armorShop.addActionListener(this);
		townSelectPanel.add(armorShop);
		dungeonEntrance = new JButton("Dungeon Entrance");
		dungeonEntrance.setBounds(50, 240, 200, 50);
		dungeonEntrance.addActionListener(this);
		townSelectPanel.add(dungeonEntrance);
		trainingGrounds = new JButton("Training Grounds");
		trainingGrounds.setBounds(300, 80, 200, 50);
		trainingGrounds.addActionListener(this);
		townSelectPanel.add(trainingGrounds);
		amuletShop = new JButton("Amulets");
		amuletShop.setBounds(300, 160, 200, 50);
		amuletShop.addActionListener(this);
		townSelectPanel.add(amuletShop);
		leaveTown = new JButton("Return to Menu");
		leaveTown.setBounds(550, 240, 200, 50);
		leaveTown.addActionListener(this);
		townSelectPanel.add(leaveTown);
		goldCounter = new JLabel("");
		goldCounter.setBounds(550, 10, 300, 80);
		goldCounter.setFont(textFont);
		goldCounter.setForeground(Color.yellow);
		goldCounter.setHorizontalAlignment(SwingConstants.RIGHT);
		townWeaponEquipped = new JLabel("Weapon: Fists");
		townWeaponEquipped.setBounds(40, 10, 500, 80);
		townWeaponEquipped.setFont(textFont);
		townWeaponEquipped.setForeground(Color.white);
		townWeaponEquipped.setHorizontalAlignment(SwingConstants.LEFT);
		townArmorEquipped = new JLabel("Armor: None");
		townArmorEquipped.setBounds(40, 50, 500, 80);
		townArmorEquipped.setFont(textFont);
		townArmorEquipped.setForeground(Color.white);
		townArmorEquipped.setHorizontalAlignment(SwingConstants.LEFT);
		townAmuletEquipped = new JLabel("Amulet: None");
		townAmuletEquipped.setBounds(40, 90, 500, 80);
		townAmuletEquipped.setFont(textFont);
		townAmuletEquipped.setForeground(Color.white);
		townAmuletEquipped.setHorizontalAlignment(SwingConstants.LEFT);
		townPanel.add(townWeaponEquipped);
		townPanel.add(townArmorEquipped);
		townPanel.add(townAmuletEquipped);
		townPanel.add(goldCounter);
		townPanel.setVisible(false);

		// Training Panel
		trainingPanel = new JPanel();
		trainingPanel.setBounds(0, 0, 900, 650);
		trainingPanel.setBackground(Color.black);
		trainingPanel.setLayout(null);
		accuracyPanel = new JPanel();
		accuracyPanel.setBounds(100, 75, 300, 400);
		accuracyPanel.setBackground(Color.gray);
		accuracyPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLoweredBevelBorder(),
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		accuracyPanel.setLayout(null);
		trainingPanel.add(accuracyPanel);
		displayAccuracy = new JLabel("Your Accuracy: ");
		displayAccuracy.setBounds(50, 20, 200, 50);
		displayAccuracy.setHorizontalAlignment(SwingConstants.CENTER);
		displayAccuracy.setFont(shopFont);
		accuracyPanel.add(displayAccuracy);
		accuracy1 = new JButton("Accuracy +1");
		accuracy1.setBounds(50, 95, 200, 50);
		accuracy1.addActionListener(this);
		accuracy1Cost = new JLabel("100 Gold");
		accuracy1Cost.setBounds(50, 135, 200, 50);
		accuracy1Cost.setHorizontalAlignment(SwingConstants.CENTER);
		accuracy1Cost.setFont(shopFont);
		accuracyPanel.add(accuracy1);
		accuracyPanel.add(accuracy1Cost);
		accuracy2 = new JButton("Accuracy +2");
		accuracy2.setBounds(50, 195, 200, 50);
		accuracy2.addActionListener(this);
		accuracy2Cost = new JLabel("180 Gold");
		accuracy2Cost.setBounds(50, 235, 200, 50);
		accuracy2Cost.setHorizontalAlignment(SwingConstants.CENTER);
		accuracy2Cost.setFont(shopFont);
		accuracyPanel.add(accuracy2);
		accuracyPanel.add(accuracy2Cost);
		accuracy3 = new JButton("Accuracy +3");
		accuracy3.setBounds(50, 295, 200, 50);
		accuracy3.addActionListener(this);
		accuracy3Cost = new JLabel("240 Gold");
		accuracy3Cost.setBounds(50, 335, 200, 50);
		accuracy3Cost.setHorizontalAlignment(SwingConstants.CENTER);
		accuracy3Cost.setFont(shopFont);
		accuracyPanel.add(accuracy3);
		accuracyPanel.add(accuracy3Cost);
		speedPanel = new JPanel();
		speedPanel.setBounds(475, 75, 300, 400);
		speedPanel.setBackground(Color.gray);
		speedPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLoweredBevelBorder(),
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		speedPanel.setLayout(null);
		trainingPanel.add(speedPanel);
		displaySpeed = new JLabel("Your Speed: ");
		displaySpeed.setBounds(50, 20, 200, 50);
		displaySpeed.setHorizontalAlignment(SwingConstants.CENTER);
		displaySpeed.setFont(shopFont);
		speedPanel.add(displaySpeed);
		speed1 = new JButton("Speed +1");
		speed1.setBounds(50, 95, 200, 50);
		speed1.addActionListener(this);
		speed1Cost = new JLabel("175 Gold");
		speed1Cost.setBounds(50, 135, 200, 50);
		speed1Cost.setHorizontalAlignment(SwingConstants.CENTER);
		speed1Cost.setFont(shopFont);
		speedPanel.add(speed1);
		speedPanel.add(speed1Cost);
		speed2 = new JButton("Speed +2");
		speed2.setBounds(50, 195, 200, 50);
		speed2.addActionListener(this);
		speed2Cost = new JLabel("250 Gold");
		speed2Cost.setBounds(50, 235, 200, 50);
		speed2Cost.setHorizontalAlignment(SwingConstants.CENTER);
		speed2Cost.setFont(shopFont);
		speedPanel.add(speed2);
		speedPanel.add(speed2Cost);
		speed3 = new JButton("Speed +3");
		speed3.setBounds(50, 295, 200, 50);
		speed3.addActionListener(this);
		speed3Cost = new JLabel("310 Gold");
		speed3Cost.setBounds(50, 335, 200, 50);
		speed3Cost.setHorizontalAlignment(SwingConstants.CENTER);
		speed3Cost.setFont(shopFont);
		speedPanel.add(speed3);
		speedPanel.add(speed3Cost);
		leaveTrainingGrounds = new JButton("Return to Town");
		leaveTrainingGrounds.setBounds(363, 500, 150, 40);
		leaveTrainingGrounds.addActionListener(this);
		trainingPanel.add(leaveTrainingGrounds);
		trainingPanel.setVisible(false);

		// Save Select Panel
		saveSelectPanel = new JPanel();
		saveSelectPanel.setBounds(0, 0, 900, 650);
		saveSelectPanel.setBackground(Color.black);
		saveSelectPanel.setLayout(null);
		saveSelectButtonsPanel = new JPanel();
		saveSelectButtonsPanel.setBounds(300, 50, 300, 500);
		saveSelectButtonsPanel.setBackground(Color.gray);
		saveSelectButtonsPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLoweredBevelBorder(),
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		saveSelectButtonsPanel.setLayout(null);
		saveSelectPanel.add(saveSelectButtonsPanel);
		save1 = new JRadioButton("Empty Save");
		save1.setBounds(25, 50, 250, 30);
		save2 = new JRadioButton("Empty Save");
		save2.setBounds(25, 100, 250, 30);
		save3 = new JRadioButton("Empty Save");
		save3.setBounds(25, 150, 250, 30);
		save4 = new JRadioButton("Empty Save");
		save4.setBounds(25, 200, 250, 30);
		save5 = new JRadioButton("Empty Save");
		save5.setBounds(25, 250, 250, 30);
		ButtonGroup saveSelection = new ButtonGroup();
		saveSelection.add(save1);
		saveSelection.add(save2);
		saveSelection.add(save3);
		saveSelection.add(save4);
		saveSelection.add(save5);
		selectSave = new JButton("Select Save");
		selectSave.setBounds(75, 375, 150, 30);
		selectSave.addActionListener(this);
		leaveSaveSelection = new JButton("Return to Menu");
		leaveSaveSelection.setBounds(75, 425, 150, 30);
		leaveSaveSelection.addActionListener(this);
		saveSelectButtonsPanel.add(save1);
		saveSelectButtonsPanel.add(save2);
		saveSelectButtonsPanel.add(save3);
		saveSelectButtonsPanel.add(save4);
		saveSelectButtonsPanel.add(save5);
		saveSelectButtonsPanel.add(selectSave);
		saveSelectButtonsPanel.add(leaveSaveSelection);
		saveSelectPanel.setVisible(false);

		// Floor Select Panel
		floorSelectPanel = new JPanel();
		floorSelectPanel.setBounds(0, 0, 900, 650);
		floorSelectPanel.setBackground(Color.black);
		floorSelectPanel.setLayout(null);
		floorSelectButtonsPanel = new JPanel();
		floorSelectButtonsPanel.setBounds(300, 50, 300, 500);
		floorSelectButtonsPanel.setBackground(Color.gray);
		floorSelectButtonsPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLoweredBevelBorder(),
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		floorSelectButtonsPanel.setLayout(null);
		floorSelectPanel.add(floorSelectButtonsPanel);
		firstFloor = new JRadioButton("Floor 1");
		firstFloor.setBounds(100, 50, 100, 30);
		secondFloor = new JRadioButton("Floor 2");
		secondFloor.setBounds(100, 100, 100, 30);
		thirdFloor = new JRadioButton("Floor 3");
		thirdFloor.setBounds(100, 150, 100, 30);
		fourthFloor = new JRadioButton("Floor 4");
		fourthFloor.setBounds(100, 200, 100, 30);
		fifthFloor = new JRadioButton("Floor 5");
		fifthFloor.setBounds(100, 250, 100, 30);
		ButtonGroup floorSelection = new ButtonGroup();
		floorSelection.add(firstFloor);
		floorSelection.add(secondFloor);
		floorSelection.add(thirdFloor);
		floorSelection.add(fourthFloor);
		floorSelection.add(fifthFloor);
		selectFloor = new JButton("Enter Floor");
		selectFloor.setBounds(75, 375, 150, 30);
		selectFloor.addActionListener(this);
		leaveFloorSelection = new JButton("Return to Town");
		leaveFloorSelection.setBounds(75, 425, 150, 30);
		leaveFloorSelection.addActionListener(this);
		floorSelectButtonsPanel.add(firstFloor);
		floorSelectButtonsPanel.add(secondFloor);
		floorSelectButtonsPanel.add(thirdFloor);
		floorSelectButtonsPanel.add(fourthFloor);
		floorSelectButtonsPanel.add(fifthFloor);
		floorSelectButtonsPanel.add(selectFloor);
		floorSelectButtonsPanel.add(leaveFloorSelection);
		floorSelectPanel.setVisible(false);

		// Dungeon Panel
		dungeonPanel = new JPanel();
		dungeonPanel.setBounds(0, 0, 900, 650);
		dungeonPanel.setBackground(Color.black);
		dungeonPanel.setLayout(null);
		dungeonOptionsPanel = new JPanel();
		dungeonOptionsPanel.setBounds(45, 270, 800, 290);
		dungeonOptionsPanel.setBackground(Color.gray);
		dungeonOptionsPanel.setLayout(null);
		dungeonOptionsPanel.setVisible(false);
		dungeonOptionsPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLoweredBevelBorder(),
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		dungeonPanel.add(dungeonOptionsPanel);
		dungeonLightAttack = new JButton("Light Attack");
		dungeonLightAttack.setBounds(10, 30, 380, 100);
		dungeonLightAttack.addActionListener(this);
		dungeonOptionsPanel.add(dungeonLightAttack);
		dungeonHeavyAttack = new JButton("Heavy Attack");
		dungeonHeavyAttack.setBounds(410, 30, 380, 100);
		dungeonHeavyAttack.addActionListener(this);
		dungeonOptionsPanel.add(dungeonHeavyAttack);
		dungeonSpecialMove = new JButton("Special Move");
		dungeonSpecialMove.setBounds(10, 150, 380, 100);
		dungeonSpecialMove.addActionListener(this);
		dungeonOptionsPanel.add(dungeonSpecialMove);
		dungeonFlee = new JButton("Flee");
		dungeonFlee.setBounds(410, 150, 380, 100);
		dungeonFlee.addActionListener(this);
		dungeonOptionsPanel.add(dungeonFlee);
		currentEnemyName = new JLabel("");
		currentEnemyName.setBounds(50, 30, 400, 80);
		currentEnemyName.setFont(textFont);
		currentEnemyName.setForeground(Color.white);
		currentEnemyHealth = new JLabel("");
		currentEnemyHealth.setBounds(50, 120, 300, 80);
		currentEnemyHealth.setFont(textFont);
		currentEnemyHealth.setForeground(Color.white);
		dungeonPanel.add(currentEnemyName);
		dungeonPanel.add(currentEnemyHealth);
		playerNameLabel = new JLabel("");
		playerNameLabel.setBounds(540, 30, 300, 80);
		playerNameLabel.setFont(textFont);
		playerNameLabel.setForeground(Color.white);
		playerNameLabel.setHorizontalAlignment(SwingConstants.RIGHT);
		playerHealthLabel = new JLabel("");
		playerHealthLabel.setBounds(540, 120, 300, 80);
		playerHealthLabel.setFont(textFont);
		playerHealthLabel.setForeground(Color.white);
		playerHealthLabel.setHorizontalAlignment(SwingConstants.RIGHT);
		dungeonPanel.add(playerNameLabel);
		dungeonPanel.add(playerHealthLabel);
		dungeonEnemyDefeatedPanel = new JPanel();
		dungeonEnemyDefeatedPanel.setBounds(45, 270, 800, 290);
		dungeonEnemyDefeatedPanel.setBackground(Color.gray);
		dungeonEnemyDefeatedPanel.setLayout(null);
		dungeonEnemyDefeatedPanel.setVisible(false);
		dungeonEnemyDefeatedPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLoweredBevelBorder(),
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		dungeonPanel.add(dungeonEnemyDefeatedPanel);
		dungeonContinue = new JButton("Delve Deeper");
		dungeonContinue.setBounds(10, 100, 380, 100);
		dungeonContinue.addActionListener(this);
		dungeonLeave = new JButton("Return to Town");
		dungeonLeave.setBounds(410, 100, 380, 100);
		dungeonLeave.addActionListener(this);
		dungeonEnemyDefeatedPanel.add(dungeonContinue);
		dungeonEnemyDefeatedPanel.add(dungeonLeave);
		currentRoom = new JLabel("Room 1");
		currentRoom.setBounds(50, 0, 300, 80);
		currentRoom.setFont(textFont);
		currentRoom.setForeground(Color.white);
		dungeonPanel.add(currentRoom);
		dungeonPanel.setVisible(false);

		// Weapon Shop
		weaponShopPanel = new JPanel();
		weaponShopPanel.setBounds(0, 0, 900, 650);
		weaponShopPanel.setBackground(Color.black);
		weaponShopPanel.setLayout(null);
		currentWeaponDisplay = new JPanel();
		currentWeaponDisplay.setBounds(245, 50, 400, 500);
		currentWeaponDisplay.setBackground(Color.gray);
		currentWeaponDisplay.setLayout(null);
		currentWeaponDisplay.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLoweredBevelBorder(),
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		weaponShopPanel.add(currentWeaponDisplay);
		weaponName = new JLabel();
		weaponName.setBounds(50, 30, 300, 50);
		weaponName.setFont(textFont);
		weaponName.setForeground(Color.white);
		weaponName.setHorizontalAlignment(SwingConstants.CENTER);
		weaponCost = new JLabel();
		weaponCost.setBounds(100, 75, 200, 30);
		weaponCost.setFont(shopFont);
		weaponCost.setForeground(Color.white);
		weaponCost.setHorizontalAlignment(SwingConstants.CENTER);
		weaponDamage = new JLabel();
		weaponDamage.setBounds(100, 100, 200, 30);
		weaponDamage.setFont(shopFont);
		weaponDamage.setForeground(Color.white);
		weaponDamage.setHorizontalAlignment(SwingConstants.CENTER);
		currentWeaponDisplay.add(weaponName);
		currentWeaponDisplay.add(weaponCost);
		currentWeaponDisplay.add(weaponDamage);
		purchaseWeapon = new JButton("Purchase Weapon");
		purchaseWeapon.setBounds(100, 320, 200, 50);
		purchaseWeapon.addActionListener(this);
		equipWeapon = new JButton("Equip Weapon");
		equipWeapon.setBounds(100, 320, 200, 50);
		equipWeapon.addActionListener(this);
		leaveWeaponShop = new JButton("Leave Shop");
		leaveWeaponShop.setBounds(100, 390, 200, 50);
		leaveWeaponShop.addActionListener(this);
		currentWeaponDisplay.add(purchaseWeapon);
		currentWeaponDisplay.add(equipWeapon);
		currentWeaponDisplay.add(leaveWeaponShop);
		equipWeapon.setVisible(false);
		nextWeapon = new JButton(">");
		nextWeapon.setBounds(650, 250, 50, 80);
		nextWeapon.addActionListener(this);
		nextWeapon.setBackground(Color.green);
		previousWeapon = new JButton("<");
		previousWeapon.setBounds(190, 250, 50, 80);
		previousWeapon.addActionListener(this);
		previousWeapon.setBackground(Color.darkGray);
		weaponShopPanel.add(nextWeapon);
		weaponShopPanel.add(previousWeapon);
		weaponDisplayedCounter = new JLabel();
		weaponDisplayedCounter.setBounds(150, 10, 100, 30);
		weaponDisplayedCounter.setHorizontalAlignment(SwingConstants.CENTER);
		currentWeaponDisplay.add(weaponDisplayedCounter);
		weaponShopPanel.setVisible(false);

		// Armor Shop
		armorShopPanel = new JPanel();
		armorShopPanel.setBounds(0, 0, 900, 650);
		armorShopPanel.setBackground(Color.black);
		armorShopPanel.setLayout(null);
		currentArmorDisplay = new JPanel();
		currentArmorDisplay.setBounds(245, 50, 400, 500);
		currentArmorDisplay.setBackground(Color.gray);
		currentArmorDisplay.setLayout(null);
		currentArmorDisplay.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLoweredBevelBorder(),
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		armorShopPanel.add(currentArmorDisplay);
		armorName = new JLabel();
		armorName.setBounds(50, 30, 300, 50);
		armorName.setFont(textFont);
		armorName.setForeground(Color.white);
		armorName.setHorizontalAlignment(SwingConstants.CENTER);
		armorCost = new JLabel();
		armorCost.setBounds(100, 75, 200, 30);
		armorCost.setFont(shopFont);
		armorCost.setForeground(Color.white);
		armorCost.setHorizontalAlignment(SwingConstants.CENTER);
		armorHealth = new JLabel();
		armorHealth.setBounds(100, 100, 200, 30);
		armorHealth.setFont(shopFont);
		armorHealth.setForeground(Color.white);
		armorHealth.setHorizontalAlignment(SwingConstants.CENTER);
		currentArmorDisplay.add(armorName);
		currentArmorDisplay.add(armorCost);
		currentArmorDisplay.add(armorHealth);
		purchaseArmor = new JButton("Purchase Armor");
		purchaseArmor.setBounds(100, 320, 200, 50);
		purchaseArmor.addActionListener(this);
		equipArmor = new JButton("Equip Armor");
		equipArmor.setBounds(100, 320, 200, 50);
		equipArmor.addActionListener(this);
		leaveArmorShop = new JButton("Leave Shop");
		leaveArmorShop.setBounds(100, 390, 200, 50);
		leaveArmorShop.addActionListener(this);
		currentArmorDisplay.add(purchaseArmor);
		currentArmorDisplay.add(equipArmor);
		currentArmorDisplay.add(leaveArmorShop);
		equipArmor.setVisible(false);
		nextArmor = new JButton(">");
		nextArmor.setBounds(650, 250, 50, 80);
		nextArmor.addActionListener(this);
		nextArmor.setBackground(Color.green);
		previousArmor = new JButton("<");
		previousArmor.setBounds(190, 250, 50, 80);
		previousArmor.addActionListener(this);
		previousArmor.setBackground(Color.darkGray);
		armorShopPanel.add(nextArmor);
		armorShopPanel.add(previousArmor);
		armorDisplayedCounter = new JLabel();
		armorDisplayedCounter.setBounds(150, 10, 100, 30);
		armorDisplayedCounter.setHorizontalAlignment(SwingConstants.CENTER);
		currentArmorDisplay.add(armorDisplayedCounter);
		armorShopPanel.setVisible(false);
		
		// Amulet Collection
		amuletPanel = new JPanel();
		amuletPanel.setBounds(0,0,900,650);
		amuletPanel.setBackground(Color.black);
		amuletPanel.setLayout(null);
		amuletDisplay = new JPanel();
		amuletDisplay.setBounds(245,50,400,500);
		amuletDisplay.setBackground(Color.gray);
		amuletDisplay.setLayout(null);
		amuletDisplay.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createLoweredBevelBorder(),
				BorderFactory.createEmptyBorder(5, 5, 5, 5)));
		amuletPanel.add(amuletDisplay);
		amuletName = new JLabel();
		amuletName.setBounds(50, 30, 300, 50);
		amuletName.setFont(textFont);
		amuletName.setForeground(Color.white);
		amuletName.setHorizontalAlignment(SwingConstants.CENTER);
		amuletDescription = new JLabel();
		amuletDescription.setBounds(90, 100, 210, 30);
		amuletDescription.setForeground(Color.white);
		amuletDescription.setHorizontalAlignment(SwingConstants.CENTER);
		amuletDisplay.add(amuletName);
		amuletDisplay.add(amuletDescription);
		equipAmulet = new JButton("Equip Amulet");
		equipAmulet.setBounds(100, 320, 200, 50);
		equipAmulet.addActionListener(this);
		equipAmulet.setVisible(false);
		leaveAmuletShop = new JButton("Return to Town");
		leaveAmuletShop.setBounds(100, 390, 200, 50);
		leaveAmuletShop.addActionListener(this);
		amuletDisplay.add(equipAmulet);
		amuletDisplay.add(leaveAmuletShop);
		nextAmulet = new JButton(">");
		nextAmulet.setBounds(650,250,50,80);
		nextAmulet.addActionListener(this);
		nextAmulet.setBackground(Color.green);
		previousAmulet = new JButton("<");
		previousAmulet.setBounds(190, 250, 50, 80);
		previousAmulet.addActionListener(this);
		previousAmulet.setBackground(Color.darkGray);
		amuletPanel.add(nextAmulet);
		amuletPanel.add(previousAmulet);
		amuletDisplayedCounter = new JLabel();
		amuletDisplayedCounter.setBounds(150, 10, 100, 30);
		amuletDisplayedCounter.setHorizontalAlignment(SwingConstants.CENTER);
		amuletDisplay.add(amuletDisplayedCounter);
		amuletPanel.setVisible(false);

		// JFrame Settings
		window = new JFrame("Bozo Legends");
		window.setSize(900, 650);
		window.setLayout(null);
		window.setVisible(true);
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		window.setResizable(false);

		// Adding Panels to JFrame
		window.add(mainMenuPanel);
		window.add(characterCreationPanel);
		window.add(introductionPanel);
		window.add(townPanel);
		window.add(dungeonPanel);
		window.add(weaponShopPanel);
		window.add(armorShopPanel);
		window.add(floorSelectPanel);
		window.add(saveSelectPanel);
		window.add(trainingPanel);
		window.add(amuletPanel);
	}

	// Save game
	private void Save(String file) {
		try {
			BufferedWriter bw = new BufferedWriter(new FileWriter(file));
			bw.write(name);
			bw.newLine();
			bw.write(build);
			bw.newLine();
			bw.write("" + playerHealth);
			bw.newLine();
			bw.write("" + playerDamage);
			bw.newLine();
			bw.write("" + playerSpeed);
			bw.newLine();
			bw.write("" + playerAccuracy);
			bw.newLine();
			bw.write("" + playerGold);
			bw.newLine();
			bw.write("" + beatBoss1);
			bw.newLine();
			bw.write("" + beatBoss2);
			bw.newLine();
			bw.write("" + beatBoss3);
			bw.newLine();
			bw.write("" + beatBoss4);
			bw.newLine();
			bw.write("" + beatBoss5);
			bw.newLine();
			bw.write(equippedWeapon[0]);
			bw.newLine();
			bw.write(equippedWeapon[1]);
			bw.newLine();
			bw.write(equippedWeapon[2]);
			bw.newLine();
			bw.write("" + weaponsPurchased[0]);
			bw.newLine();
			bw.write("" + weaponsPurchased[1]);
			bw.newLine();
			bw.write("" + weaponsPurchased[2]);
			bw.newLine();
			bw.write("" + weaponsPurchased[3]);
			bw.newLine();
			bw.write("" + weaponsPurchased[4]);
			bw.newLine();
			bw.write("" + weaponsPurchased[5]);
			bw.newLine();
			bw.write("" + weaponsPurchased[6]);
			bw.newLine();
			bw.write("" + weaponsPurchased[7]);
			bw.newLine();
			bw.write("" + currEquippedWeapon);
			bw.newLine();
			bw.write(equippedArmor[0]);
			bw.newLine();
			bw.write(equippedArmor[1]);
			bw.newLine();
			bw.write(equippedArmor[2]);
			bw.newLine();
			bw.write("" + armorsPurchased[0]);
			bw.newLine();
			bw.write("" + armorsPurchased[1]);
			bw.newLine();
			bw.write("" + armorsPurchased[2]);
			bw.newLine();
			bw.write("" + armorsPurchased[3]);
			bw.newLine();
			bw.write("" + armorsPurchased[4]);
			bw.newLine();
			bw.write("" + armorsPurchased[5]);
			bw.newLine();
			bw.write("" + currEquippedArmor);
			bw.newLine();
			bw.write("" + amuletNames[0]);
			bw.newLine();
			bw.write("" + amuletNames[1]);
			bw.newLine();
			bw.write("" + amuletNames[2]);
			bw.newLine();
			bw.write("" + amuletNames[3]);
			bw.newLine();
			bw.write("" + amuletNames[4]);
			bw.newLine();
			bw.write("" + amuletDesc[0]);
			bw.newLine();
			bw.write("" + amuletDesc[1]);
			bw.newLine();
			bw.write("" + amuletDesc[2]);
			bw.newLine();
			bw.write("" + amuletDesc[3]);
			bw.newLine();
			bw.write("" + amuletDesc[4]);
			bw.newLine();
			bw.write("" + amuletsUnlocked[0]);
			bw.newLine();
			bw.write("" + amuletsUnlocked[1]);
			bw.newLine();
			bw.write("" + amuletsUnlocked[2]);
			bw.newLine();
			bw.write("" + amuletsUnlocked[3]);
			bw.newLine();
			bw.write("" + amuletsUnlocked[4]);
			bw.newLine();
			bw.write("" + equippedAmulet[0]);
			bw.newLine();
			bw.write("" + equippedAmulet[1]);
			bw.newLine();
			bw.write("" + currEquippedAmulet);
			bw.close();
		} catch (IOException e) {
			System.out.println("An error occured.");
			e.printStackTrace();
		}
	}

	// Load game
	private void Load(String file) {
		try {
			BufferedReader br = new BufferedReader(new FileReader(file));
			String line = br.readLine();
			name = line;
			line = br.readLine();
			build = line;
			line = br.readLine();
			playerHealth = Integer.parseInt(line);
			line = br.readLine();
			playerDamage = Integer.parseInt(line);
			line = br.readLine();
			playerSpeed = Integer.parseInt(line);
			line = br.readLine();
			playerAccuracy = Integer.parseInt(line);
			line = br.readLine();
			playerGold = Integer.parseInt(line);
			line = br.readLine();
			beatBoss1 = Boolean.parseBoolean(line);
			line = br.readLine();
			beatBoss2 = Boolean.parseBoolean(line);
			line = br.readLine();
			beatBoss3 = Boolean.parseBoolean(line);
			line = br.readLine();
			beatBoss4 = Boolean.parseBoolean(line);
			line = br.readLine();
			beatBoss5 = Boolean.parseBoolean(line);
			line = br.readLine();
			equippedWeapon[0] = line;
			line = br.readLine();
			equippedWeapon[1] = line;
			line = br.readLine();
			equippedWeapon[2] = line;
			line = br.readLine();
			weaponsPurchased[0] = Boolean.parseBoolean(line);
			line = br.readLine();
			weaponsPurchased[1] = Boolean.parseBoolean(line);
			line = br.readLine();
			weaponsPurchased[2] = Boolean.parseBoolean(line);
			line = br.readLine();
			weaponsPurchased[3] = Boolean.parseBoolean(line);
			line = br.readLine();
			weaponsPurchased[4] = Boolean.parseBoolean(line);
			line = br.readLine();
			weaponsPurchased[5] = Boolean.parseBoolean(line);
			line = br.readLine();
			weaponsPurchased[6] = Boolean.parseBoolean(line);
			line = br.readLine();
			weaponsPurchased[7] = Boolean.parseBoolean(line);
			line = br.readLine();
			currEquippedWeapon = Integer.parseInt(line);
			line = br.readLine();
			equippedArmor[0] = line;
			line = br.readLine();
			equippedArmor[1] = line;
			line = br.readLine();
			equippedArmor[2] = line;
			line = br.readLine();
			armorsPurchased[0] = Boolean.parseBoolean(line);
			line = br.readLine();
			armorsPurchased[1] = Boolean.parseBoolean(line);
			line = br.readLine();
			armorsPurchased[2] = Boolean.parseBoolean(line);
			line = br.readLine();
			armorsPurchased[3] = Boolean.parseBoolean(line);
			line = br.readLine();
			armorsPurchased[4] = Boolean.parseBoolean(line);
			line = br.readLine();
			armorsPurchased[5] = Boolean.parseBoolean(line);
			line = br.readLine();
			currEquippedArmor = Integer.parseInt(line);
			line = br.readLine();
			amuletNames[0] = line;
			line = br.readLine();
			amuletNames[1] = line;
			line = br.readLine();
			amuletNames[2] = line;
			line = br.readLine();
			amuletNames[3] = line;
			line = br.readLine();
			amuletNames[4] = line;
			line = br.readLine();
			amuletDesc[0] = line;
			line = br.readLine();
			amuletDesc[1] = line;
			line = br.readLine();
			amuletDesc[2] = line;
			line = br.readLine();
			amuletDesc[3] = line;
			line = br.readLine();
			amuletDesc[4] = line;
			line = br.readLine();
			amuletsUnlocked[0] = Boolean.parseBoolean(line);
			line = br.readLine();
			amuletsUnlocked[1] = Boolean.parseBoolean(line);
			line = br.readLine();
			amuletsUnlocked[2] = Boolean.parseBoolean(line);
			line = br.readLine();
			amuletsUnlocked[3] = Boolean.parseBoolean(line);
			line = br.readLine();
			amuletsUnlocked[4] = Boolean.parseBoolean(line);
			line = br.readLine();
			equippedAmulet[0] = line;
			line = br.readLine();
			equippedAmulet[1] = line;
			line = br.readLine();
			currEquippedAmulet = Integer.parseInt(line);
			br.close();
		} catch (IOException e) {
			System.out.println("An error occured.");
			e.printStackTrace();
		}
	}

	// Make game happen
	public static void main(String[] args) {
		new main();
	}

	// When button is pressed, do the thing
	public void actionPerformed(ActionEvent e) {
		// New Game Button
		if (e.getSource() == playGame) {
			mainMenuPanel.setVisible(false);
			saveSelectPanel.setVisible(true);
			if (new File("save1.txt").isFile()) {
				try {
					BufferedReader br = new BufferedReader(new FileReader("save1.txt"));
					String line = br.readLine();
					String playerSave = line;
					line = br.readLine();
					playerSave += " (" + line + ")";
					save1.setText(playerSave);
					br.close();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
			if (new File("save2.txt").isFile()) {
				try {
					BufferedReader br = new BufferedReader(new FileReader("save2.txt"));
					String line = br.readLine();
					String playerSave = line;
					line = br.readLine();
					playerSave += " (" + line + ")";
					save2.setText(playerSave);
					br.close();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
			if (new File("save3.txt").isFile()) {
				try {
					BufferedReader br = new BufferedReader(new FileReader("save3.txt"));
					String line = br.readLine();
					String playerSave = line;
					line = br.readLine();
					playerSave += " (" + line + ")";
					save3.setText(playerSave);
					br.close();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
			if (new File("save4.txt").isFile()) {
				try {
					BufferedReader br = new BufferedReader(new FileReader("save4.txt"));
					String line = br.readLine();
					String playerSave = line;
					line = br.readLine();
					playerSave += " (" + line + ")";
					save4.setText(playerSave);
					br.close();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
			if (new File("save5.txt").isFile()) {
				try {
					BufferedReader br = new BufferedReader(new FileReader("save5.txt"));
					String line = br.readLine();
					String playerSave = line;
					line = br.readLine();
					playerSave += " (" + line + ")";
					save5.setText(playerSave);
					br.close();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
			}
		}

		// Save Selection
		if (e.getSource() == selectSave) {
			if (save1.isSelected()) {
				if (new File("save1.txt").isFile()) {
					selectedSave = "save1.txt";
					Load(selectedSave);
					goldCounter.setText("Gold: " + playerGold);
					townWeaponEquipped.setText("Weapon: " + equippedWeapon[0]);
					townArmorEquipped.setText("Armor: " + equippedArmor[0]);
					townAmuletEquipped.setText("Amulet: " + equippedAmulet[0]);
					saveSelectPanel.setVisible(false);
					townPanel.setVisible(true);
					townSelectPanel.setVisible(true);
				} else {
					saveSelectPanel.setVisible(false);
					characterCreationPanel.setVisible(true);
					classSelectionPanel.setVisible(true);
					selectedSave = "save1.txt";
				}
			} else if (save2.isSelected()) {
				if (new File("save2.txt").isFile()) {
					selectedSave = "save2.txt";
					Load(selectedSave);
					goldCounter.setText("Gold: " + playerGold);
					townWeaponEquipped.setText("Weapon: " + equippedWeapon[0]);
					townArmorEquipped.setText("Armor: " + equippedArmor[0]);
					townAmuletEquipped.setText("Amulet: " + equippedAmulet[0]);
					saveSelectPanel.setVisible(false);
					townPanel.setVisible(true);
					townSelectPanel.setVisible(true);
				} else {
					saveSelectPanel.setVisible(false);
					characterCreationPanel.setVisible(true);
					classSelectionPanel.setVisible(true);
					selectedSave = "save2.txt";
				}
			} else if (save3.isSelected()) {
				if (new File("save3.txt").isFile()) {
					selectedSave = "save3.txt";
					Load(selectedSave);
					goldCounter.setText("Gold: " + playerGold);
					townWeaponEquipped.setText("Weapon: " + equippedWeapon[0]);
					townArmorEquipped.setText("Armor: " + equippedArmor[0]);
					townAmuletEquipped.setText("Amulet: " + equippedAmulet[0]);
					saveSelectPanel.setVisible(false);
					townPanel.setVisible(true);
					townSelectPanel.setVisible(true);
				} else {
					saveSelectPanel.setVisible(false);
					characterCreationPanel.setVisible(true);
					classSelectionPanel.setVisible(true);
					selectedSave = "save3.txt";
				}
			} else if (save4.isSelected()) {
				if (new File("save4.txt").isFile()) {
					selectedSave = "save4.txt";
					Load(selectedSave);
					goldCounter.setText("Gold: " + playerGold);
					townWeaponEquipped.setText("Weapon: " + equippedWeapon[0]);
					townArmorEquipped.setText("Armor: " + equippedArmor[0]);
					townAmuletEquipped.setText("Amulet: " + equippedAmulet[0]);
					saveSelectPanel.setVisible(false);
					townPanel.setVisible(true);
					townSelectPanel.setVisible(true);
				} else {
					saveSelectPanel.setVisible(false);
					characterCreationPanel.setVisible(true);
					classSelectionPanel.setVisible(true);
					selectedSave = "save4.txt";
				}
			} else if (save5.isSelected()) {
				if (new File("save5.txt").isFile()) {
					selectedSave = "save5.txt";
					Load(selectedSave);
					goldCounter.setText("Gold: " + playerGold);
					townWeaponEquipped.setText("Weapon: " + equippedWeapon[0]);
					townArmorEquipped.setText("Armor: " + equippedArmor[0]);
					townAmuletEquipped.setText("Amulet: " + equippedAmulet[0]);
					saveSelectPanel.setVisible(false);
					townPanel.setVisible(true);
					townSelectPanel.setVisible(true);
				} else {
					saveSelectPanel.setVisible(false);
					characterCreationPanel.setVisible(true);
					classSelectionPanel.setVisible(true);
					selectedSave = "save5.txt";
				}
			} else {
				JOptionPane.showMessageDialog(window, "Please select a save.");
			}
		}
		if (e.getSource() == leaveSaveSelection) {
			saveSelectPanel.setVisible(false);
			mainMenuPanel.setVisible(true);
		}

		// Quit Game Button
		if (e.getSource() == quitGame) {
			System.exit(0);
		}

		// Confirm Class Button
		if (e.getSource() == confirmClass) {
			if (warriorClass.isSelected()) {
				playerHealth = 18;
				playerDamage = 2;
				playerSpeed = 4;
				playerAccuracy = 84;
				build = "warrior";
				dungeonSpecialMove.setText("Health Potion");
				classSelectionPanel.setVisible(false);
				enterNamePanel.setVisible(true);
			} else if (mercenaryClass.isSelected()) {
				playerHealth = 14;
				playerDamage = 3;
				playerSpeed = 1;
				playerAccuracy = 72;
				build = "mercenary";
				dungeonSpecialMove.setText("Double Strike");
				classSelectionPanel.setVisible(false);
				enterNamePanel.setVisible(true);
			} else if (paladinClass.isSelected()) {
				playerHealth = 22;
				playerDamage = 1;
				playerSpeed = 2;
				playerAccuracy = 80;
				build = "paladin";
				dungeonSpecialMove.setText("Life Steal");
				classSelectionPanel.setVisible(false);
				enterNamePanel.setVisible(true);
			} else
				JOptionPane.showMessageDialog(window, "Please select a class");
		}

		// Confirm Player Name
		if (e.getSource() == confirmPlayerName) {
			if (playerName.getText().equals("")) {
				JOptionPane.showMessageDialog(window, "Please input a name");
			} else {
				name = playerName.getText();
				enterNamePanel.setVisible(false);
				characterCreationPanel.setVisible(false);
				introductionPanel.setVisible(true);
				intro1.setVisible(true);
			}
		}

		// Leave Town
		if (e.getSource() == leaveTown) {
			townPanel.setVisible(false);
			mainMenuPanel.setVisible(true);
			Save(selectedSave);
			name = "na";
			build = "na";
			playerHealth = -1;
			playerDamage = -1;
			playerSpeed = -1;
			playerAccuracy = -1;
			playerGold = -1;
			beatBoss1 = false;
			beatBoss2 = false;
			beatBoss3 = false;
			beatBoss4 = false;
			beatBoss5 = false;
			equippedWeapon[0] = "None";
			equippedWeapon[1] = "0";
			equippedWeapon[2] = "0";
			weaponsPurchased[0] = false;
			weaponsPurchased[1] = false;
			weaponsPurchased[2] = false;
			weaponsPurchased[3] = false;
			weaponsPurchased[4] = false;
			weaponsPurchased[5] = false;
			weaponsPurchased[6] = false;
			weaponsPurchased[7] = false;
			currEquippedWeapon = -1;
			equippedArmor[0] = "None";
			equippedArmor[1] = "0";
			equippedArmor[2] = "0";
			armorsPurchased[0] = false;
			armorsPurchased[1] = false;
			armorsPurchased[2] = false;
			armorsPurchased[3] = false;
			armorsPurchased[4] = false;
			armorsPurchased[5] = false;
			currEquippedArmor = -1;
			amuletNames[0] = "???";
			amuletNames[1] = "???";
			amuletNames[2] = "???";
			amuletNames[3] = "???";
			amuletNames[4] = "???";
			amuletDesc[0] = "???";
			amuletDesc[1] = "???";
			amuletDesc[2] = "???";
			amuletDesc[3] = "???";
			amuletDesc[4] = "???";
			amuletsUnlocked[0] = false;
			amuletsUnlocked[1] = false;
			amuletsUnlocked[2] = false;
			amuletsUnlocked[3] = false;
			amuletsUnlocked[4] = false;
			equippedAmulet[0] = "None";
			equippedAmulet[1] = "0";
			currEquippedAmulet = -1;
		}

		// Continue Intro
		if (e.getSource() == continueIntro) {
			main.intro1.setVisible(false);
			main.intro2.setVisible(true);
		}
		if (e.getSource() == continueIntro2) {
			main.intro2.setVisible(false);
			introductionPanel.setVisible(false);
			townPanel.setVisible(true);
			townSelectPanel.setVisible(true);
			playerGold = 50;
			goldCounter.setText("Gold: " + playerGold);
			Save(selectedSave);
		}

		// Town Buttons
		// Weapon Shop
		if (e.getSource() == weaponShop) {
			weaponShopPanel.setVisible(true);
			townPanel.setVisible(false);
			weaponName.setText(weaponNames[0]);
			weaponCost.setText(weaponPrices[0] + " Gold");
			weaponDamage.setText((weaponDamages[0] - 2) + "-" + (weaponDamages[0] + 1) + " Damage");
			currWeaponDisplayed = 0;
			weaponDisplayedCounter.setText((currWeaponDisplayed + 1) + "/8");
			previousWeapon.setBackground(Color.darkGray);
			nextWeapon.setBackground(Color.green);
			if (weaponsPurchased[0]) {
				equipWeapon.setVisible(true);
				purchaseWeapon.setVisible(false);
				if (currWeaponDisplayed == currEquippedWeapon) {
					equipWeapon.setText("Equipped");
				} else {
					equipWeapon.setText("Equip Weapon");
				}
			} else {
				purchaseWeapon.setVisible(true);
				equipWeapon.setVisible(false);
			}
		}
		if (e.getSource() == purchaseWeapon) {
			if (weaponPrices[currWeaponDisplayed] <= playerGold) {
				playerGold = playerGold - weaponPrices[currWeaponDisplayed];
				weaponsPurchased[currWeaponDisplayed] = true;
				purchaseWeapon.setVisible(false);
				equipWeapon.setVisible(true);
				equipWeapon.setText("Equip Weapon");
			} else {
				JOptionPane.showMessageDialog(window, "You broke bitch, you don't have the money to buy that!");
			}
		}
		if (e.getSource() == equipWeapon) {
			equippedWeapon[0] = weaponNames[currWeaponDisplayed];
			equippedWeapon[1] = "" + weaponPrices[currWeaponDisplayed];
			equippedWeapon[2] = "" + weaponDamages[currWeaponDisplayed];
			equipWeapon.setText("Equipped");
			playerDamage = weaponDamages[currWeaponDisplayed];
			currEquippedWeapon = currWeaponDisplayed;
			townWeaponEquipped.setText("Weapon: " + equippedWeapon[0]);
		}
		if (e.getSource() == leaveWeaponShop) {
			weaponShopPanel.setVisible(false);
			townPanel.setVisible(true);
			goldCounter.setText("Gold: " + playerGold);
			Save(selectedSave);
		}
		if (e.getSource() == nextWeapon) {
			if (currWeaponDisplayed < weaponNames.length - 1) {
				currWeaponDisplayed++;
				weaponDisplayedCounter.setText((currWeaponDisplayed + 1) + "/8");
				weaponName.setText(weaponNames[currWeaponDisplayed]);
				weaponCost.setText(weaponPrices[currWeaponDisplayed] + " Gold");
				weaponDamage.setText((weaponDamages[currWeaponDisplayed] - 2) + "-"
						+ (weaponDamages[currWeaponDisplayed] + 1) + " Damage");
				if (currWeaponDisplayed >= weaponNames.length - 1) {
					nextWeapon.setBackground(Color.darkGray);
				}
				previousWeapon.setBackground(Color.green);
				if (weaponsPurchased[currWeaponDisplayed]) {
					equipWeapon.setVisible(true);
					purchaseWeapon.setVisible(false);
					if (currEquippedWeapon == currWeaponDisplayed) {
						equipWeapon.setText("Equipped");
					} else {
						equipWeapon.setText("Equip Weapon");
					}
				} else {
					purchaseWeapon.setVisible(true);
					equipWeapon.setVisible(false);
				}
			}
		}
		if (e.getSource() == previousWeapon) {
			if (currWeaponDisplayed > 0) {
				currWeaponDisplayed--;
				weaponDisplayedCounter.setText((currWeaponDisplayed + 1) + "/8");
				weaponName.setText(weaponNames[currWeaponDisplayed]);
				weaponCost.setText(weaponPrices[currWeaponDisplayed] + " Gold");
				weaponDamage.setText((weaponDamages[currWeaponDisplayed] - 2) + "-"
						+ (weaponDamages[currWeaponDisplayed] + 1) + " Damage");
				if (currWeaponDisplayed <= 0) {
					previousWeapon.setBackground(Color.darkGray);
				}
				nextWeapon.setBackground(Color.green);
				if (weaponsPurchased[currWeaponDisplayed]) {
					equipWeapon.setVisible(true);
					purchaseWeapon.setVisible(false);
					if (currEquippedWeapon == currWeaponDisplayed) {
						equipWeapon.setText("Equipped");
					} else {
						equipWeapon.setText("Equip Weapon");
					}
				} else {
					purchaseWeapon.setVisible(true);
					equipWeapon.setVisible(false);
				}
			}
		}
		// Armor Shop
		if (e.getSource() == armorShop) {
			armorShopPanel.setVisible(true);
			townPanel.setVisible(false);
			armorName.setText(armorNames[0]);
			armorCost.setText(armorPrices[0] + " Gold");
			armorHealth.setText(armorHealths[0] + " Extra Health");
			currArmorDisplayed = 0;
			armorDisplayedCounter.setText((currArmorDisplayed + 1) + "/6");
			previousArmor.setBackground(Color.darkGray);
			nextArmor.setBackground(Color.green);
			if (armorsPurchased[0]) {
				equipArmor.setVisible(true);
				purchaseArmor.setVisible(false);
				if (currArmorDisplayed == currEquippedArmor) {
					equipArmor.setText("Equipped");
				} else {
					equipArmor.setText("Equip Armor");
				}
			} else {
				purchaseArmor.setVisible(true);
				equipArmor.setVisible(false);
			}
		}
		if (e.getSource() == purchaseArmor) {
			if (armorPrices[currArmorDisplayed] <= playerGold) {
				playerGold = playerGold - armorPrices[currArmorDisplayed];
				armorsPurchased[currArmorDisplayed] = true;
				purchaseArmor.setVisible(false);
				equipArmor.setVisible(true);
				equipArmor.setText("Equip Armor");
			} else {
				JOptionPane.showMessageDialog(window, "You broke bitch, you don't have the money to buy that!");
			}
		}
		if (e.getSource() == equipArmor) {
			playerHealth = playerHealth - Integer.parseInt(equippedArmor[2]);
			equippedArmor[0] = armorNames[currArmorDisplayed];
			equippedArmor[1] = "" + armorPrices[currArmorDisplayed];
			equippedArmor[2] = "" + armorHealths[currArmorDisplayed];
			equipArmor.setText("Equipped");
			playerHealth = playerHealth + Integer.parseInt(equippedArmor[2]);
			currEquippedArmor = currArmorDisplayed;
			townArmorEquipped.setText("Armor: " + equippedArmor[0]);
		}
		if (e.getSource() == leaveArmorShop) {
			armorShopPanel.setVisible(false);
			townPanel.setVisible(true);
			goldCounter.setText("Gold: " + playerGold);
			Save(selectedSave);
		}
		if (e.getSource() == nextArmor) {
			if (currArmorDisplayed < armorNames.length - 1) {
				currArmorDisplayed++;
				armorDisplayedCounter.setText((currArmorDisplayed + 1) + "/6");
				armorName.setText(armorNames[currArmorDisplayed]);
				armorCost.setText(armorPrices[currArmorDisplayed] + " Gold");
				armorHealth.setText(armorHealths[currArmorDisplayed] + " Extra Health");
				if (currArmorDisplayed >= armorNames.length - 1) {
					nextArmor.setBackground(Color.darkGray);
				}
				previousArmor.setBackground(Color.green);
				if (armorsPurchased[currArmorDisplayed]) {
					equipArmor.setVisible(true);
					purchaseArmor.setVisible(false);
					if (currEquippedArmor == currArmorDisplayed) {
						equipArmor.setText("Equipped");
					} else {
						equipArmor.setText("Equip Armor");
					}
				} else {
					purchaseArmor.setVisible(true);
					equipArmor.setVisible(false);
				}
			}
		}
		if (e.getSource() == previousArmor) {
			if (currArmorDisplayed > 0) {
				currArmorDisplayed--;
				armorDisplayedCounter.setText((currArmorDisplayed + 1) + "/6");
				armorName.setText(armorNames[currArmorDisplayed]);
				armorCost.setText(armorPrices[currArmorDisplayed] + " Gold");
				armorHealth.setText(armorHealths[currArmorDisplayed] + " Extra Health");
				if (currArmorDisplayed <= 0) {
					previousArmor.setBackground(Color.darkGray);
				}
				nextArmor.setBackground(Color.green);
				if (armorsPurchased[currArmorDisplayed]) {
					equipArmor.setVisible(true);
					purchaseArmor.setVisible(false);
					if (currEquippedArmor == currArmorDisplayed) {
						equipArmor.setText("Equipped");
					} else {
						equipArmor.setText("Equip Armor");
					}
				} else {
					purchaseArmor.setVisible(true);
					equipArmor.setVisible(false);
				}
			}
		}
		// DungeonEntrance
		if (e.getSource() == dungeonEntrance) {
			townPanel.setVisible(false);
			floorSelectPanel.setVisible(true);
		}
		if (e.getSource() == selectFloor) {
			if (firstFloor.isSelected()) {
				floorSelectPanel.setVisible(false);
				dungeonPanel.setVisible(true);
				dungeonOptionsPanel.setVisible(true);
				rand = generator.nextInt(4);
				currentEnemy = floor1Enemies[rand];
				enemyH = (floor1Stats[0] + 1) / 2 + generator.nextInt(floor1Stats[0] / 2);
				enemyS = generator.nextInt(floor1Stats[1]) + 1;
				enemySp = generator.nextInt(floor1Stats[2]) + 1;
				enemyAcc = floor1Stats[3] + 1;
				currentEnemyName.setText(currentEnemy);
				currentEnemyHealth.setText("Enemy HP: " + enemyH);
				playerNameLabel.setText(name);
				playerHealthLabel.setText("Your HP: " + playerHealth);
				currentPlayerHealth = playerHealth;
				specialMoveCounter = 2;
				roomCounter = 1;
				currentRoom.setText("Room 1");
				if (playerSpeed < enemySp) {
					currentPlayerHealth = currentPlayerHealth - enemyS;
					JOptionPane.showMessageDialog(window, "The enemy was faster than you and struck first!");
				}
				currentFloor = 1;
			} else if (secondFloor.isSelected()) {
				floorSelectPanel.setVisible(false);
				dungeonPanel.setVisible(true);
				dungeonOptionsPanel.setVisible(true);
				rand = generator.nextInt(4);
				currentEnemy = floor2Enemies[rand];
				enemyH = (floor2Stats[0] + 1) / 2 + generator.nextInt(floor2Stats[0] / 2);
				enemyS = generator.nextInt(floor2Stats[1]) + 1;
				enemySp = generator.nextInt(floor2Stats[2]) + 1;
				enemyAcc = floor2Stats[3] + 1;
				currentEnemyName.setText(currentEnemy);
				currentEnemyHealth.setText("Enemy HP: " + enemyH);
				playerNameLabel.setText(name);
				playerHealthLabel.setText("Your HP: " + playerHealth);
				currentPlayerHealth = playerHealth;
				specialMoveCounter = 2;
				roomCounter = 1;
				currentRoom.setText("Room 1");
				if (playerSpeed < enemySp) {
					currentPlayerHealth = currentPlayerHealth - enemyS;
					JOptionPane.showMessageDialog(window, "The enemy was faster than you and struck first!");
				}
				currentFloor = 2;
			} else if (thirdFloor.isSelected()) {
				floorSelectPanel.setVisible(false);
				dungeonPanel.setVisible(true);
				dungeonOptionsPanel.setVisible(true);
				rand = generator.nextInt(4);
				currentEnemy = floor3Enemies[rand];
				enemyH = (floor3Stats[0] + 1) / 2 + generator.nextInt(floor3Stats[0] / 2);
				enemyS = generator.nextInt(floor3Stats[1]) + 1;
				enemySp = generator.nextInt(floor3Stats[2]) + 1;
				enemyAcc = floor3Stats[3] + 1;
				currentEnemyName.setText(currentEnemy);
				currentEnemyHealth.setText("Enemy HP: " + enemyH);
				playerNameLabel.setText(name);
				playerHealthLabel.setText("Your HP: " + playerHealth);
				currentPlayerHealth = playerHealth;
				specialMoveCounter = 2;
				roomCounter = 1;
				currentRoom.setText("Room 1");
				if (playerSpeed < enemySp) {
					currentPlayerHealth = currentPlayerHealth - enemyS;
					JOptionPane.showMessageDialog(window, "The enemy was faster than you and struck first!");
				}
				currentFloor = 3;
			} else if (fourthFloor.isSelected()) {
				floorSelectPanel.setVisible(false);
				dungeonPanel.setVisible(true);
				dungeonOptionsPanel.setVisible(true);
				rand = generator.nextInt(4);
				currentEnemy = floor4Enemies[rand];
				enemyH = (floor4Stats[0] + 1) / 2 + generator.nextInt(floor4Stats[0] / 2);
				enemyS = generator.nextInt(floor4Stats[1]) + 1;
				enemySp = generator.nextInt(floor4Stats[2]) + 1;
				enemyAcc = floor4Stats[3] + 1;
				currentEnemyName.setText(currentEnemy);
				currentEnemyHealth.setText("Enemy HP: " + enemyH);
				playerNameLabel.setText(name);
				playerHealthLabel.setText("Your HP: " + playerHealth);
				currentPlayerHealth = playerHealth;
				specialMoveCounter = 2;
				roomCounter = 1;
				currentRoom.setText("Room 1");
				if (playerSpeed < enemySp) {
					currentPlayerHealth = currentPlayerHealth - enemyS;
					JOptionPane.showMessageDialog(window, "The enemy was faster than you and struck first!");
				}
				currentFloor = 4;
			} else if (fifthFloor.isSelected()) {
				floorSelectPanel.setVisible(false);
				dungeonPanel.setVisible(true);
				dungeonOptionsPanel.setVisible(true);
				rand = generator.nextInt(4);
				currentEnemy = floor5Enemies[rand];
				enemyH = (floor5Stats[0] + 1) / 2 + generator.nextInt(floor5Stats[0] / 2);
				enemyS = generator.nextInt(floor5Stats[1]) + 1;
				enemySp = generator.nextInt(floor5Stats[2]) + 1;
				enemyAcc = floor5Stats[3] + 1;
				currentEnemyName.setText(currentEnemy);
				currentEnemyHealth.setText("Enemy HP: " + enemyH);
				playerNameLabel.setText(name);
				playerHealthLabel.setText("Your HP: " + playerHealth);
				currentPlayerHealth = playerHealth;
				specialMoveCounter = 2;
				roomCounter = 1;
				currentRoom.setText("Room 1");
				if (playerSpeed < enemySp) {
					currentPlayerHealth = currentPlayerHealth - enemyS;
					JOptionPane.showMessageDialog(window, "The enemy was faster than you and struck first!");
				}
				currentFloor = 5;
			} else {
				JOptionPane.showMessageDialog(window, "Please select a floor.");
			}
		}
		if (e.getSource() == leaveFloorSelection) {
			townPanel.setVisible(true);
			floorSelectPanel.setVisible(false);
		}
		// Training Grounds
		if (e.getSource() == trainingGrounds) {
			townPanel.setVisible(false);
			trainingPanel.setVisible(true);
			displayAccuracy.setText("Your Accuracy: " + playerAccuracy);
			displaySpeed.setText("Your Speed: " + playerSpeed);
		}
		if (e.getSource() == accuracy1) {
			if (playerGold >= 100 && playerAccuracy != 100) {
				playerGold = playerGold - 100;
				playerAccuracy++;
				displayAccuracy.setText("Your Accuracy: " + playerAccuracy);
			} else if (playerAccuracy == 100) {
				JOptionPane.showMessageDialog(window, "I LIKE PENNIES! (You can't increase this any more stoopid)");
			} else {
				JOptionPane.showMessageDialog(window, "I LIKE PENNIES! (You don't have enough money dummy)");
			}
		}
		if (e.getSource() == accuracy2) {
			if (playerGold >= 180 && playerAccuracy != 100) {
				playerGold = playerGold - 180;
				playerAccuracy++;
				playerAccuracy++;
				if (playerAccuracy > 100) {
					playerAccuracy = 100;
				}
				displayAccuracy.setText("Your Accuracy: " + playerAccuracy);
			} else if (playerAccuracy == 100) {
				JOptionPane.showMessageDialog(window, "I LIKE PENNIES! (You can't increase this any more stoopid)");
			} else {
				JOptionPane.showMessageDialog(window, "I LIKE PENNIES! (You don't have enough money dummy)");
			}
		}
		if (e.getSource() == accuracy3) {
			if (playerGold >= 240 && playerAccuracy != 100) {
				playerGold = playerGold - 240;
				playerAccuracy++;
				playerAccuracy++;
				playerAccuracy++;
				if (playerAccuracy > 100) {
					playerAccuracy = 100;
				}
				displayAccuracy.setText("Your Accuracy: " + playerAccuracy);
			} else if (playerAccuracy == 100) {
				JOptionPane.showMessageDialog(window, "I LIKE PENNIES! (You can't increase this any more stoopid)");
			} else {
				JOptionPane.showMessageDialog(window, "I LIKE PENNIES! (You don't have enough money dummy)");
			}
		}
		if (e.getSource() == speed1) {
			if (playerGold >= 175 && playerSpeed != 10) {
				playerGold = playerGold - 175;
				playerSpeed++;
				displaySpeed.setText("Your Speed: " + playerSpeed);
			} else if (playerSpeed == 10) {
				JOptionPane.showMessageDialog(window, "I LIKE QUARTERS! (You can't increase this any more stoopid)");
			} else {
				JOptionPane.showMessageDialog(window, "I LIKE QUARTERS! (You don't have enough money dummy)");
			}
		}
		if (e.getSource() == speed2) {
			if (playerGold >= 250 && playerSpeed != 10) {
				playerGold = playerGold - 250;
				playerSpeed++;
				playerSpeed++;
				if (playerSpeed > 10) {
					playerSpeed = 10;
				}
				displaySpeed.setText("Your Speed: " + playerSpeed);
			} else if (playerSpeed == 10) {
				JOptionPane.showMessageDialog(window, "I LIKE QUARTERS! (You can't increase this any more stoopid)");
			} else {
				JOptionPane.showMessageDialog(window, "I LIKE QUARTERS! (You don't have enough money dummy)");
			}
		}
		if (e.getSource() == speed3) {
			if (playerGold >= 310 && playerSpeed != 10) {
				playerGold = playerGold - 310;
				playerSpeed++;
				playerSpeed++;
				playerSpeed++;
				if (playerSpeed > 10) {
					playerSpeed = 10;
				}
				displaySpeed.setText("Your Speed: " + playerSpeed);
			} else if (playerSpeed == 10) {
				JOptionPane.showMessageDialog(window, "I LIKE QUARTERS! (You can't increase this any more stoopid)");
			} else {
				JOptionPane.showMessageDialog(window, "I LIKE QUARTERS! (You don't have enough money dummy)");
			}
		}
		if (e.getSource() == leaveTrainingGrounds) {
			townPanel.setVisible(true);
			trainingPanel.setVisible(false);
			goldCounter.setText("Gold: " + playerGold);
			Save(selectedSave);
		}
		if (e.getSource() == amuletShop) {
			townPanel.setVisible(false);
			amuletPanel.setVisible(true);
			amuletName.setText(amuletNames[0]);
			amuletDescription.setText(amuletDesc[0]);
			currAmuletDisplayed = 0;
			amuletDisplayedCounter.setText((currAmuletDisplayed + 1) + "/5");
			previousAmulet.setBackground(Color.darkGray);
			nextAmulet.setBackground(Color.green);
			if (amuletsUnlocked[0]) {
				equipAmulet.setVisible(true);
				if (currAmuletDisplayed == currEquippedAmulet) {
					equipAmulet.setText("Equipped");
				} else {
					equipAmulet.setText("Equip Amulet");
				}
			} else {
				equipAmulet.setVisible(false);
			}
		}
		if (e.getSource() == equipAmulet) {
			switch(currEquippedAmulet) {
			case 0:
				playerAccuracy = playerAccuracy - Integer.parseInt(equippedAmulet[1]);
				break;
			case 1:
				playerSpeed = playerSpeed - Integer.parseInt(equippedAmulet[1]);
				break;
			case 2:
				playerHealth = playerHealth - Integer.parseInt(equippedAmulet[1]);
				break;
			case 3:
				playerDamage = playerDamage - Integer.parseInt(equippedAmulet[1]);
				break;
			case 4:
				doubleGold = false;
				break;
			}
			equippedAmulet[0] = amuletNames[currAmuletDisplayed];
			equippedAmulet[1] = "" + amuletModifiers[currAmuletDisplayed];
			equipAmulet.setText("Equipped");
			currEquippedAmulet = currAmuletDisplayed;
			switch(currEquippedAmulet) {
			case 0:
				playerAccuracy += Integer.parseInt(equippedAmulet[1]);
				break;
			case 1:
				playerSpeed += Integer.parseInt(equippedAmulet[1]);
				break;
			case 2:
				playerHealth += Integer.parseInt(equippedAmulet[1]);
				break;
			case 3:
				playerDamage += Integer.parseInt(equippedAmulet[1]);
				break;
			case 4:
				doubleGold = true;
				break;
			}
			townAmuletEquipped.setText("Amulet: " + equippedAmulet[0]);
		}
		if (e.getSource() == nextAmulet) {
			if (currAmuletDisplayed < amuletNames.length - 1) {
				currAmuletDisplayed++;
				amuletDisplayedCounter.setText((currAmuletDisplayed + 1) + "/5");
				amuletName.setText(amuletNames[currAmuletDisplayed]);
				amuletDescription.setText(amuletDesc[currAmuletDisplayed]);
				if (currAmuletDisplayed >= amuletNames.length - 1) {
					nextAmulet.setBackground(Color.darkGray);
				}
				previousAmulet.setBackground(Color.green);
				if (amuletsUnlocked[currAmuletDisplayed]) {
					equipAmulet.setVisible(true);
					if (currEquippedAmulet == currAmuletDisplayed) {
						equipAmulet.setText("Equipped");
					} else {
						equipAmulet.setText("Equip Amulet");
					}
				} else {
					equipAmulet.setVisible(false);
				}
			}
		}
		if (e.getSource() == previousAmulet) {
			if (currAmuletDisplayed > 0) {
				currAmuletDisplayed--;
				amuletDisplayedCounter.setText((currAmuletDisplayed + 1) + "/5");
				amuletName.setText(amuletNames[currAmuletDisplayed]);
				amuletDescription.setText(amuletDesc[currAmuletDisplayed]);
				if (currAmuletDisplayed <= 0) {
					previousAmulet.setBackground(Color.darkGray);
				}
				nextAmulet.setBackground(Color.green);
				if (amuletsUnlocked[currAmuletDisplayed]) {
					equipAmulet.setVisible(true);
					if (currEquippedAmulet == currAmuletDisplayed) {
						equipAmulet.setText("Equipped");
					} else {
						equipAmulet.setText("Equip Amulet");
					}
				} else {
					equipAmulet.setVisible(false);
				}
			}
		}
		if (e.getSource() == leaveAmuletShop) {
			amuletPanel.setVisible(false);
			townPanel.setVisible(true);
			goldCounter.setText("Gold: " + playerGold);
			Save(selectedSave);
		}

		// Dungeon Options
		if (e.getSource() == dungeonLightAttack) {
			int randomDamage = generator.nextInt(3);
			int damageDealt = playerDamage - 2 + randomDamage;
			int damageTaken = enemyS;
			boolean enemyHit = false;
			boolean playerHit = false;
			if (generator.nextInt(100) <= playerAccuracy) {
				if (generator.nextInt(8) == 1) {
					damageDealt = damageDealt * 2;
				}
				enemyH = enemyH - damageDealt;
				currentEnemyHealth.setText("Enemy HP: " + enemyH);
				playerHit = true;
			}
			if (generator.nextInt(100) <= enemyAcc && enemyH > 0) {
				currentPlayerHealth = currentPlayerHealth - damageTaken;
				playerHealthLabel.setText("Your HP: " + currentPlayerHealth);
				enemyHit = true;
			}
			if (enemyHit && playerHit) {
				JOptionPane.showMessageDialog(window,
						"You took " + damageTaken + " damage, and dealt " + damageDealt + " damage!");
			} else if (enemyHit && !playerHit) {
				JOptionPane.showMessageDialog(window,
						"The took " + damageTaken + " damage, and you missed your attack!");
			} else if (!enemyHit && playerHit) {
				JOptionPane.showMessageDialog(window,
						"The enemy missed their attack and you dealt " + damageDealt + " damage!");
			} else {
				JOptionPane.showMessageDialog(window, "How did both of you dumbasses miss.");
			}
			if (currentPlayerHealth <= 0) {
				dungeonPanel.setVisible(false);
				townPanel.setVisible(true);
				JOptionPane.showMessageDialog(window,
						"You passed out from all of your injuries and were brought back to town! The doctor took some of your gold as expenses!");
				playerGold = playerGold - playerGold / 20;
				goldCounter.setText("Gold: " + playerGold);
				Save(selectedSave);
			}
			if (enemyH <= 0) {
				dungeonEnemyDefeatedPanel.setVisible(true);
				dungeonOptionsPanel.setVisible(false);
				if (roomCounter >= 10) {
					int tempGold = 0;
					int dropAmulet = 0;
					switch (currentFloor) {
					case 1:
						if (beatBoss1) {
							tempGold = generator.nextInt(10) + 5;
							JOptionPane.showMessageDialog(window,
									"You defeated the enemy and gained " + tempGold + " gold!");
							playerGold += tempGold;
						} else {
							JOptionPane.showMessageDialog(window,
									"You have defeated the boss and completed this floor!  You gained 50 gold!");
							playerGold += 50;
							beatBoss1 = true;
						}
						dropAmulet = generator.nextInt(20);
						if (dropAmulet == 0) {
							amuletsUnlocked[0] = true;
							JOptionPane.showMessageDialog(window, "You look to the floor to find a small amulet. Inscribed on it is a small crosshair.");
							amuletNames[0] = hiddenAmuletNames[0];
							amuletDesc[0] = hiddenAmuletDesc[0];
						}
						break;
					case 2:
						if (beatBoss2) {
							tempGold = generator.nextInt(20) + 15;
							JOptionPane.showMessageDialog(window,
									"You defeated the enemy and gained " + tempGold + " gold!");
							playerGold += tempGold;
						} else {
							JOptionPane.showMessageDialog(window,
									"You have defeated the boss and completed this floor!  You gained 175 gold!");
							playerGold += 150;
							beatBoss2 = true;
						}
						dropAmulet = generator.nextInt(20);
						if (dropAmulet == 0) {
							amuletsUnlocked[1] = true;
							JOptionPane.showMessageDialog(window, "You look to the floor to find a small amulet. Inscribed on it is a rabbit.");
							amuletNames[1] = hiddenAmuletNames[1];
							amuletDesc[1] = hiddenAmuletDesc[1];
						}
						break;
					case 3:
						if (beatBoss3) {
							tempGold = generator.nextInt(30) + 25;
							JOptionPane.showMessageDialog(window,
									"You defeated the enemy and gained " + tempGold + " gold!");
							playerGold += tempGold;
						} else {
							JOptionPane.showMessageDialog(window,
									"You have defeated the boss and completed this floor!  You gained 300 gold!");
							playerGold += 250;
							beatBoss3 = true;
						}
						dropAmulet = generator.nextInt(20);
						if (dropAmulet == 0) {
							amuletsUnlocked[2] = true;
							JOptionPane.showMessageDialog(window, "You look to the floor to find a small amulet. Inscribed on it is a shield.");
							amuletNames[2] = hiddenAmuletNames[2];
							amuletDesc[2] = hiddenAmuletDesc[2];
						}
						break;
					case 4:
						if (beatBoss4) {
							tempGold = generator.nextInt(40) + 35;
							JOptionPane.showMessageDialog(window,
									"You defeated the enemy and gained " + tempGold + " gold!");
							playerGold += tempGold;
						} else {
							JOptionPane.showMessageDialog(window,
									"You have defeated the boss and completed this floor!  You gained 425 gold!");
							playerGold += 350;
							beatBoss4 = true;
						}
						dropAmulet = generator.nextInt(20);
						if (dropAmulet == 0) {
							amuletsUnlocked[3] = true;
							JOptionPane.showMessageDialog(window, "You look to the floor to find a small amulet. Inscribed on it is a dagger.");
							amuletNames[3] = hiddenAmuletNames[3];
							amuletDesc[3] = hiddenAmuletDesc[3];
						}
						break;
					case 5:
						if (beatBoss5) {
							tempGold = generator.nextInt(50) + 45;
							JOptionPane.showMessageDialog(window,
									"You defeated the enemy and gained " + tempGold + " gold!");
							playerGold += tempGold;
						} else {
							JOptionPane.showMessageDialog(window,
									"You have defeated the boss and completed this floor!  You gained 550 gold!");
							playerGold += 500;
							beatBoss5 = true;
						}
						dropAmulet = generator.nextInt(20);
						if (dropAmulet == 0) {
							amuletsUnlocked[4] = true;
							JOptionPane.showMessageDialog(window, "You look to the floor to find a small amulet. Inscribed on it is a gold coin.");
							amuletNames[4] = hiddenAmuletNames[4];
							amuletDesc[4] = hiddenAmuletDesc[4];
						}
						break;
					}
					dungeonEnemyDefeatedPanel.setVisible(false);
					dungeonOptionsPanel.setVisible(true);
					dungeonPanel.setVisible(false);
					townPanel.setVisible(true);
					goldCounter.setText("Gold: " + playerGold);
					Save(selectedSave);
				} else {
					int tempGold = 0;
					switch (currentFloor) {
					case 1:
						tempGold = generator.nextInt(10) + 5;
						break;
					case 2:
						tempGold = generator.nextInt(20) + 15;
						break;
					case 3:
						tempGold = generator.nextInt(30) + 25;
						break;
					case 4:
						tempGold = generator.nextInt(40) + 35;
						break;
					case 5:
						tempGold = generator.nextInt(50) + 45;
						break;
					}
					JOptionPane.showMessageDialog(window, "You defeated the enemy and gained " + tempGold + " gold!");
					playerGold += tempGold;
				}
			}
		}
		if (e.getSource() == dungeonHeavyAttack) {
			int randomDamage = generator.nextInt(3);
			int damageDealt = playerDamage - 2 + randomDamage;
			int damageTaken = enemyS;
			boolean enemyHit = false;
			boolean playerHit = false;
			if (generator.nextInt(100) <= playerAccuracy - 15) {
				damageDealt = damageDealt + playerDamage;
				if (generator.nextInt(8) == 1) {
					damageDealt = damageDealt * 2;
				}
				enemyH = enemyH - damageDealt;
				currentEnemyHealth.setText("Enemy HP: " + enemyH);
				playerHit = true;
			}
			if (generator.nextInt(100) <= enemyAcc && enemyH > 0) {
				currentPlayerHealth = currentPlayerHealth - damageTaken;
				playerHealthLabel.setText("Your HP: " + currentPlayerHealth);
				enemyHit = true;
			}
			if (enemyHit && playerHit) {
				JOptionPane.showMessageDialog(window,
						"You took " + damageTaken + " damage, and dealt " + damageDealt + " damage!");
			} else if (enemyHit && !playerHit) {
				JOptionPane.showMessageDialog(window,
						"The took " + damageTaken + " damage, and you missed your attack!");
			} else if (!enemyHit && playerHit) {
				JOptionPane.showMessageDialog(window,
						"The enemy missed their attack and you dealt " + damageDealt + " damage!");
			} else {
				JOptionPane.showMessageDialog(window, "How did both of you dumbasses miss.");
			}
			if (currentPlayerHealth <= 0) {
				dungeonPanel.setVisible(false);
				townPanel.setVisible(true);
				JOptionPane.showMessageDialog(window,
						"You passed out from all of your injuries and were brought back to town! The doctor took some of your gold as expenses!");
				playerGold = playerGold - playerGold / 20;
				goldCounter.setText("Gold: " + playerGold);
				Save(selectedSave);
			}
			if (enemyH <= 0) {
				dungeonEnemyDefeatedPanel.setVisible(true);
				dungeonOptionsPanel.setVisible(false);
				if (roomCounter >= 10) {
					int tempGold = 0;
					int dropAmulet = 0;
					switch (currentFloor) {
					case 1:
						if (beatBoss1) {
							tempGold = generator.nextInt(10) + 5;
							JOptionPane.showMessageDialog(window,
									"You defeated the enemy and gained " + tempGold + " gold!");
							playerGold += tempGold;
						} else {
							JOptionPane.showMessageDialog(window,
									"You have defeated the boss and completed this floor!  You gained 50 gold!");
							playerGold += 50;
							beatBoss1 = true;
						}
						dropAmulet = generator.nextInt(20);
						if (dropAmulet == 0) {
							amuletsUnlocked[0] = true;
							JOptionPane.showMessageDialog(window, "You look to the floor to find a small amulet. Inscribed on it is a small crosshair.");
							amuletNames[0] = hiddenAmuletNames[0];
							amuletDesc[0] = hiddenAmuletDesc[0];
						}
						break;
					case 2:
						if (beatBoss2) {
							tempGold = generator.nextInt(20) + 15;
							JOptionPane.showMessageDialog(window,
									"You defeated the enemy and gained " + tempGold + " gold!");
							playerGold += tempGold;
						} else {
							JOptionPane.showMessageDialog(window,
									"You have defeated the boss and completed this floor!  You gained 175 gold!");
							playerGold += 150;
							beatBoss2 = true;
						}
						dropAmulet = generator.nextInt(20);
						if (dropAmulet == 0) {
							amuletsUnlocked[1] = true;
							JOptionPane.showMessageDialog(window, "You look to the floor to find a small amulet. Inscribed on it is a rabbit.");
							amuletNames[1] = hiddenAmuletNames[1];
							amuletDesc[1] = hiddenAmuletDesc[1];
						}
						break;
					case 3:
						if (beatBoss3) {
							tempGold = generator.nextInt(30) + 25;
							JOptionPane.showMessageDialog(window,
									"You defeated the enemy and gained " + tempGold + " gold!");
							playerGold += tempGold;
						} else {
							JOptionPane.showMessageDialog(window,
									"You have defeated the boss and completed this floor!  You gained 300 gold!");
							playerGold += 250;
							beatBoss3 = true;
						}
						dropAmulet = generator.nextInt(20);
						if (dropAmulet == 0) {
							amuletsUnlocked[2] = true;
							JOptionPane.showMessageDialog(window, "You look to the floor to find a small amulet. Inscribed on it is a shield.");
							amuletNames[2] = hiddenAmuletNames[2];
							amuletDesc[2] = hiddenAmuletDesc[2];
						}
						break;
					case 4:
						if (beatBoss4) {
							tempGold = generator.nextInt(40) + 35;
							JOptionPane.showMessageDialog(window,
									"You defeated the enemy and gained " + tempGold + " gold!");
							playerGold += tempGold;
						} else {
							JOptionPane.showMessageDialog(window,
									"You have defeated the boss and completed this floor!  You gained 425 gold!");
							playerGold += 350;
							beatBoss4 = true;
						}
						dropAmulet = generator.nextInt(20);
						if (dropAmulet == 0) {
							amuletsUnlocked[3] = true;
							JOptionPane.showMessageDialog(window, "You look to the floor to find a small amulet. Inscribed on it is a dagger.");
							amuletNames[3] = hiddenAmuletNames[3];
							amuletDesc[3] = hiddenAmuletDesc[3];
						}
						break;
					case 5:
						if (beatBoss5) {
							tempGold = generator.nextInt(50) + 45;
							JOptionPane.showMessageDialog(window,
									"You defeated the enemy and gained " + tempGold + " gold!");
							playerGold += tempGold;
						} else {
							JOptionPane.showMessageDialog(window,
									"You have defeated the boss and completed this floor!  You gained 550 gold!");
							playerGold += 500;
							beatBoss5 = true;
						}
						dropAmulet = generator.nextInt(20);
						if (dropAmulet == 0) {
							amuletsUnlocked[4] = true;
							JOptionPane.showMessageDialog(window, "You look to the floor to find a small amulet. Inscribed on it is a gold coin.");
							amuletNames[4] = hiddenAmuletNames[4];
							amuletDesc[4] = hiddenAmuletDesc[4];
						}
						break;
					}
					dungeonEnemyDefeatedPanel.setVisible(false);
					dungeonOptionsPanel.setVisible(true);
					dungeonPanel.setVisible(false);
					townPanel.setVisible(true);
					goldCounter.setText("Gold: " + playerGold);
					Save(selectedSave);
				} else {
					int tempGold = 0;
					switch (currentFloor) {
					case 1:
						tempGold = generator.nextInt(10) + 5;
						break;
					case 2:
						tempGold = generator.nextInt(20) + 15;
						break;
					case 3:
						tempGold = generator.nextInt(30) + 25;
						break;
					case 4:
						tempGold = generator.nextInt(40) + 35;
						break;
					case 5:
						tempGold = generator.nextInt(50) + 45;
						break;
					}
					JOptionPane.showMessageDialog(window, "You defeated the enemy and gained " + tempGold + " gold!");
					playerGold += tempGold;
				}
			}
		}
		if (e.getSource() == dungeonSpecialMove) {
			int randomDamage = generator.nextInt(3);
			int damageDealt = playerDamage - 2 + randomDamage;
			if (build.equals("warrior")) {
				if (specialMoveCounter > 0) {
					if (currentPlayerHealth + playerHealth / 3 > playerHealth) {
						currentPlayerHealth = playerHealth;
					} else {
						currentPlayerHealth = currentPlayerHealth + playerHealth / 3;
					}
					playerHealthLabel.setText("Your HP: " + currentPlayerHealth);
					specialMoveCounter--;
					JOptionPane.showMessageDialog(window, "You pull back and heal for " + playerHealth / 3
							+ " health! You have " + specialMoveCounter + " uses left!");
				} else {
					JOptionPane.showMessageDialog(window,
							"You can't do this anymore dummy, you used all your special skills!");
				}
			} else if (build.equals("mercenary")) {
				if (specialMoveCounter > 0) {
					damageDealt = damageDealt * 2;
					enemyH = enemyH - damageDealt;
					currentEnemyHealth.setText("Enemy HP: " + enemyH);
					specialMoveCounter--;
					JOptionPane.showMessageDialog(window, "You double strike the enemy for " + damageDealt
							+ " damage! You have " + specialMoveCounter + " uses left!");
				} else {
					JOptionPane.showMessageDialog(window,
							"You can't do this anymore dummy, you used all your special skills!");
				}
			} else if (build.equals("paladin")) {
				if (specialMoveCounter > 0) {
					enemyH = enemyH - playerHealth / 5;
					currentEnemyHealth.setText("Enemy HP: " + enemyH);
					if (currentPlayerHealth + playerHealth / 5 > playerHealth) {
						currentPlayerHealth = playerHealth;
					} else {
						currentPlayerHealth = currentPlayerHealth + playerHealth / 5;
					}
					playerHealthLabel.setText("Your HP: " + currentPlayerHealth);
					specialMoveCounter--;
					JOptionPane.showMessageDialog(window,
							"You stole some of the enemies life force and healed yourself for " + playerHealth / 5
									+ " HP! You have " + specialMoveCounter + " uses left!");
				} else {
					JOptionPane.showMessageDialog(window,
							"You can't do this anymore dummy, you used all your special skills!");
				}
			}
			if (enemyH <= 0) {
				dungeonEnemyDefeatedPanel.setVisible(true);
				dungeonOptionsPanel.setVisible(false);
				if (roomCounter >= 10) {
					int tempGold = 0;
					int dropAmulet = 0;
					switch (currentFloor) {
					case 1:
						if (beatBoss1) {
							tempGold = generator.nextInt(10) + 5;
							JOptionPane.showMessageDialog(window,
									"You defeated the enemy and gained " + tempGold + " gold!");
							playerGold += tempGold;
						} else {
							JOptionPane.showMessageDialog(window,
									"You have defeated the boss and completed this floor!  You gained 50 gold!");
							playerGold += 50;
							beatBoss1 = true;
						}
						dropAmulet = generator.nextInt(20);
						if (dropAmulet == 0) {
							amuletsUnlocked[0] = true;
							JOptionPane.showMessageDialog(window, "You look to the floor to find a small amulet. Inscribed on it is a small crosshair.");
							amuletNames[0] = hiddenAmuletNames[0];
							amuletDesc[0] = hiddenAmuletDesc[0];
						}
						break;
					case 2:
						if (beatBoss2) {
							tempGold = generator.nextInt(20) + 15;
							JOptionPane.showMessageDialog(window,
									"You defeated the enemy and gained " + tempGold + " gold!");
							playerGold += tempGold;
						} else {
							JOptionPane.showMessageDialog(window,
									"You have defeated the boss and completed this floor!  You gained 175 gold!");
							playerGold += 150;
							beatBoss2 = true;
						}
						dropAmulet = generator.nextInt(20);
						if (dropAmulet == 0) {
							amuletsUnlocked[1] = true;
							JOptionPane.showMessageDialog(window, "You look to the floor to find a small amulet. Inscribed on it is a rabbit.");
							amuletNames[1] = hiddenAmuletNames[1];
							amuletDesc[1] = hiddenAmuletDesc[1];
						}
						break;
					case 3:
						if (beatBoss3) {
							tempGold = generator.nextInt(30) + 25;
							JOptionPane.showMessageDialog(window,
									"You defeated the enemy and gained " + tempGold + " gold!");
							playerGold += tempGold;
						} else {
							JOptionPane.showMessageDialog(window,
									"You have defeated the boss and completed this floor!  You gained 300 gold!");
							playerGold += 250;
							beatBoss3 = true;
						}
						dropAmulet = generator.nextInt(20);
						if (dropAmulet == 0) {
							amuletsUnlocked[2] = true;
							JOptionPane.showMessageDialog(window, "You look to the floor to find a small amulet. Inscribed on it is a shield.");
							amuletNames[2] = hiddenAmuletNames[2];
							amuletDesc[2] = hiddenAmuletDesc[2];
						}
						break;
					case 4:
						if (beatBoss4) {
							tempGold = generator.nextInt(40) + 35;
							JOptionPane.showMessageDialog(window,
									"You defeated the enemy and gained " + tempGold + " gold!");
							playerGold += tempGold;
						} else {
							JOptionPane.showMessageDialog(window,
									"You have defeated the boss and completed this floor!  You gained 425 gold!");
							playerGold += 350;
							beatBoss4 = true;
						}
						dropAmulet = generator.nextInt(20);
						if (dropAmulet == 0) {
							amuletsUnlocked[3] = true;
							JOptionPane.showMessageDialog(window, "You look to the floor to find a small amulet. Inscribed on it is a dagger.");
							amuletNames[3] = hiddenAmuletNames[3];
							amuletDesc[3] = hiddenAmuletDesc[3];
						}
						break;
					case 5:
						if (beatBoss5) {
							tempGold = generator.nextInt(50) + 45;
							JOptionPane.showMessageDialog(window,
									"You defeated the enemy and gained " + tempGold + " gold!");
							playerGold += tempGold;
						} else {
							JOptionPane.showMessageDialog(window,
									"You have defeated the boss and completed this floor!  You gained 550 gold!");
							playerGold += 500;
							beatBoss5 = true;
						}
						dropAmulet = generator.nextInt(20);
						if (dropAmulet == 0) {
							amuletsUnlocked[4] = true;
							JOptionPane.showMessageDialog(window, "You look to the floor to find a small amulet. Inscribed on it is a gold coin.");
							amuletNames[4] = hiddenAmuletNames[4];
							amuletDesc[4] = hiddenAmuletDesc[4];
						}
						break;
					}
					dungeonEnemyDefeatedPanel.setVisible(false);
					dungeonOptionsPanel.setVisible(true);
					dungeonPanel.setVisible(false);
					townPanel.setVisible(true);
					goldCounter.setText("Gold: " + playerGold);
					Save(selectedSave);
				} else {
					int tempGold = 0;
					switch (currentFloor) {
					case 1:
						tempGold = generator.nextInt(10) + 5;
						break;
					case 2:
						tempGold = generator.nextInt(20) + 15;
						break;
					case 3:
						tempGold = generator.nextInt(30) + 25;
						break;
					case 4:
						tempGold = generator.nextInt(40) + 35;
						break;
					case 5:
						tempGold = generator.nextInt(50) + 45;
						break;
					}
					JOptionPane.showMessageDialog(window, "You defeated the enemy and gained " + tempGold + " gold!");
					playerGold += tempGold;
				}
			}
		}
		if (e.getSource() == dungeonFlee) {
			rand = generator.nextInt(4);
			if (rand == 0 || rand == 1) {
				currentPlayerHealth = currentPlayerHealth - enemyS;
				playerHealthLabel.setText("Your HP: " + currentPlayerHealth);
				JOptionPane.showMessageDialog(window, "You were unable to escape and took " + enemyS + " damage!");
				if (currentPlayerHealth <= 0) {
					dungeonPanel.setVisible(false);
					townPanel.setVisible(true);
					JOptionPane.showMessageDialog(window,
							"You passed out from all of your injuries and were brought back to town! The doctor took some of your gold as expenses!");
					playerGold = playerGold - playerGold / 20;
					goldCounter.setText("Gold: " + playerGold);
					Save(selectedSave);
				}
			} else {
				dungeonPanel.setVisible(false);
				townPanel.setVisible(true);
				JOptionPane.showMessageDialog(window, "You successfully escaped!");
				goldCounter.setText("Gold: " + playerGold);
				Save(selectedSave);
			}
		}

		// Enemy Defeated Options
		if (e.getSource() == dungeonContinue) {
			roomCounter++;
			dungeonOptionsPanel.setVisible(true);
			dungeonEnemyDefeatedPanel.setVisible(false);
			rand = generator.nextInt(4);
			if (roomCounter <= 9) {
				switch (currentFloor) {
				case 1:
					currentEnemy = floor1Enemies[rand];
					enemyH = (floor1Stats[0] + 1) / 2 + generator.nextInt(floor1Stats[0] / 2);
					enemyS = generator.nextInt(floor1Stats[1]) + 1;
					enemySp = generator.nextInt(floor1Stats[2]) + 1;
					enemyAcc = floor1Stats[3] + 1;
					break;
				case 2:
					currentEnemy = floor2Enemies[rand];
					enemyH = (floor2Stats[0] + 1) / 2 + generator.nextInt(floor2Stats[0] / 2);
					enemyS = generator.nextInt(floor2Stats[1]) + 1;
					enemySp = generator.nextInt(floor2Stats[2]) + 1;
					enemyAcc = floor2Stats[3] + 1;
					break;
				case 3:
					currentEnemy = floor3Enemies[rand];
					enemyH = (floor3Stats[0] + 1) / 2 + generator.nextInt(floor3Stats[0] / 2);
					enemyS = generator.nextInt(floor3Stats[1]) + 1;
					enemySp = generator.nextInt(floor3Stats[2]) + 1;
					enemyAcc = floor3Stats[3] + 1;
					break;
				case 4:
					currentEnemy = floor4Enemies[rand];
					enemyH = (floor4Stats[0] + 1) / 2 + generator.nextInt(floor4Stats[0] / 2);
					enemyS = generator.nextInt(floor4Stats[1]) + 1;
					enemySp = generator.nextInt(floor4Stats[2]) + 1;
					enemyAcc = floor4Stats[3] + 1;
					break;
				case 5:
					currentEnemy = floor5Enemies[rand];
					enemyH = (floor5Stats[0] + 1) / 2 + generator.nextInt(floor5Stats[0] / 2);
					enemyS = generator.nextInt(floor5Stats[1]) + 1;
					enemySp = generator.nextInt(floor5Stats[2]) + 1;
					enemyAcc = floor5Stats[3] + 1;
					break;
				}
				currentRoom.setText("Room " + roomCounter);
			} else {
				switch (currentFloor) {
				case 1:
					boss1.setVisible(true);
					currentEnemy = "Harold the Gnome";
					enemyH = 32;
					enemyS = 3;
					enemySp = 5;
					enemyAcc = 88;
					break;
				case 2:
					boss2.setVisible(true);
					currentEnemy = "Agrius, King of the Wilds";
					enemyH = 48;
					enemyS = 11;
					enemySp = 7;
					enemyAcc = 76;
					currentRoom.setText("Boss room");
					break;
				case 3:
					boss3.setVisible(true);
					currentEnemy = "Veneficus, King of Magic";
					enemyH = 62;
					enemyS = 14;
					enemySp = 4;
					enemyAcc = 82;
					currentRoom.setText("Boss room");
					break;
				case 4:
					boss4.setVisible(true);
					currentEnemy = "Sicarius, King of Shadows";
					enemyH = 72;
					enemyS = 22;
					enemySp = 6;
					enemyAcc = 84;
					currentRoom.setText("Boss room");
					break;
				case 5:
					boss5.setVisible(true);
					currentEnemy = "Eques, King of Man";
					enemyH = 84;
					enemyS = 26;
					enemySp = 8;
					enemyAcc = 86;
					currentRoom.setText("Boss room");
					break;
				}
				currentRoom.setText("Boss room");
			}
			currentEnemyName.setText(currentEnemy);
			currentEnemyHealth.setText("Enemy HP: " + enemyH);
			playerNameLabel.setText(name);
			playerHealthLabel.setText("Your HP: " + currentPlayerHealth);
			if (specialMoveCounter < 2) {
				specialMoveCounter++;
			}
			if (playerSpeed < enemySp) {
				currentPlayerHealth = currentPlayerHealth - enemyS;
				playerHealthLabel.setText("Your HP: " + currentPlayerHealth);
				JOptionPane.showMessageDialog(window, "The enemy was faster than you and struck first!");
				if (currentPlayerHealth <= 0) {
					dungeonPanel.setVisible(false);
					townPanel.setVisible(true);
					JOptionPane.showMessageDialog(window,
							"You passed out from all of your injuries and were brought back to town! The doctor took some of your gold as expenses!");
					playerGold = playerGold - playerGold / 20;
					goldCounter.setText("Gold: " + playerGold);
				}
			}
		}
		if (e.getSource() == dungeonLeave) {
			dungeonOptionsPanel.setVisible(true);
			dungeonEnemyDefeatedPanel.setVisible(false);
			dungeonPanel.setVisible(false);
			townPanel.setVisible(true);
			goldCounter.setText("Gold: " + playerGold);
			Save(selectedSave);
		}

		// Boss Intros
		if (e.getSource() == continueBoss1) {
			main.boss1.setVisible(false);
		}
		if (e.getSource() == continueBoss2) {
			main.boss2.setVisible(false);
		}
		if (e.getSource() == continueBoss3) {
			main.boss3.setVisible(false);
		}
		if (e.getSource() == continueBoss4) {
			main.boss4.setVisible(false);
		}
		if (e.getSource() == continueBoss5) {
			main.boss5.setVisible(false);
		}
	}
}
